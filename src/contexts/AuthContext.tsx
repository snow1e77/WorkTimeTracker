import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { AuthUser, AuthState } from '../types';
import { AuthService } from '../services/AuthService';
import { DatabaseService } from '../services/DatabaseService';

interface AuthContextType extends AuthState {
  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è SMS-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  sendLoginCode: (phoneNumber: string) => Promise<{ success: boolean; userExists: boolean; error?: string }>;
  verifyLoginCode: (phoneNumber: string, code: string) => Promise<{ success: boolean; user?: AuthUser; error?: string; needsProfile?: boolean }>;
  createUserProfile: (phoneNumber: string, name: string, smsCode: string) => Promise<{ success: boolean; user?: AuthUser; error?: string }>;
  
  // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ç–æ–¥—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  /** @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode + verifyLoginCode */
  login: (phoneNumber: string, password: string) => Promise<boolean>;
  /** @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode + createUserProfile */
  register: (data: { name: string; phoneNumber: string; password: string }) => Promise<boolean>;
  
  logout: () => Promise<void>;
  checkAuthStatus: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [authState, setAuthState] = useState<AuthState>({
    isAuthenticated: false,
    user: null,
    isLoading: true,
  });

  const authService = AuthService.getInstance();
  const dbService = DatabaseService.getInstance();

  const checkAuthStatus = async () => {
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
      setAuthState(prev => ({ ...prev, isLoading: true }));
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞—á–∞–ª–∞
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ AuthContext...');
      await dbService.initDatabase();
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ AuthContext');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const user = await authService.getCurrentUser();
      console.log('‚úÖ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user ? `${user.name} (${user.phoneNumber})` : '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      setAuthState({
        isAuthenticated: !!user,
        user,
        isLoading: false,
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      setAuthState({
        isAuthenticated: false,
        user: null,
        isLoading: false,
      });
    }
  };

  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è SMS-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const sendLoginCode = async (phoneNumber: string) => {
    try {
      return await authService.sendLoginCode(phoneNumber);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', error);
      return { success: false, userExists: false, error: 'Failed to send code' };
    }
  };

  const verifyLoginCode = async (phoneNumber: string, code: string) => {
    try {
      const result = await authService.verifyLoginCode(phoneNumber, code);
      
      if (result.success && result.user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É
        setAuthState({
          isAuthenticated: true,
          user: result.user,
          isLoading: false,
        });
      }
      
      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:', error);
      return { success: false, error: 'Failed to verify code' };
    }
  };

  const createUserProfile = async (phoneNumber: string, name: string, smsCode: string) => {
    try {
      const result = await authService.createUserProfile(phoneNumber, name, smsCode);
      
      if (result.success && result.user) {
        // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É
        setAuthState({
          isAuthenticated: true,
          user: result.user,
          isLoading: false,
        });
      }
      
      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      return { success: false, error: 'Failed to create profile' };
    }
  };

  // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ç–æ–¥—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const login = async (phoneNumber: string, password: string): Promise<boolean> => {
    console.warn('‚ö†Ô∏è AuthContext.login —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode + verifyLoginCode');
    try {
      const result = await authService.login({ phoneNumber, password });
      
      if (result.success && result.user) {
        setAuthState({
          isAuthenticated: true,
          user: result.user,
          isLoading: false,
        });
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Login error:', error);
      return false;
    }
  };

  const register = async (data: { name: string; phoneNumber: string; password: string }): Promise<boolean> => {
    console.warn('‚ö†Ô∏è AuthContext.register —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode + createUserProfile');
    try {
      const result = await authService.register(data);
      
      if (result.success && result.user) {
        setAuthState({
          isAuthenticated: true,
          user: result.user,
          isLoading: false,
        });
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Registration error:', error);
      return false;
    }
  };

  const logout = async (): Promise<void> => {
    try {
      await authService.logout();
      setAuthState({
        isAuthenticated: false,
        user: null,
        isLoading: false,
      });
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  useEffect(() => {
    checkAuthStatus();
  }, []);

  const value: AuthContextType = {
    ...authState,
    // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    sendLoginCode,
    verifyLoginCode,
    createUserProfile,
    // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ç–æ–¥—ã
    login,
    register,
    logout,
    checkAuthStatus,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}; 