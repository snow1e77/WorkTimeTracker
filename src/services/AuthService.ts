import AsyncStorage from '@react-native-async-storage/async-storage';
import { AuthUser, LoginRequest, RegisterRequest, ResetPasswordRequest, SMSVerification } from '../types';
import { ApiDatabaseService } from './ApiDatabaseService';
import { TwilioService } from './TwilioService';
import { API_CONFIG, getApiUrl } from '../config/api';

export class AuthService {
  private static instance: AuthService;
  private dbService: ApiDatabaseService;
  private twilioService: TwilioService;

  private constructor() {
    this.dbService = ApiDatabaseService.getInstance();
    this.twilioService = TwilioService.getInstance();
  }

  static getInstance(): AuthService {
    if (!AuthService.instance) {
      AuthService.instance = new AuthService();
    }
    return AuthService.instance;
  }

  // Helper method for API calls
  private async apiCall(endpoint: string, options: RequestInit = {}): Promise<any> {
    const token = await this.getAuthToken();
    
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      ...(options.headers as Record<string, string> || {}),
    };

    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(getApiUrl(endpoint), {
      ...options,
      headers,
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
      throw new Error(errorData.error || `API Error: ${response.status}`);
    }

    return await response.json();
  }

  // Generate 6-digit SMS code
  private generateSMSCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  // Send SMS through Twilio
  private async sendSMS(phoneNumber: string, code: string, type: 'login' | 'registration'): Promise<boolean> {
    try {
      const result = await this.twilioService.sendVerificationCode(phoneNumber, code, type);
      return result.success;
    } catch (error) {
      console.error('SMS sending error:', error);
      return false;
    }
  }

  // Password hashing for SMS codes (SMS –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–∞—Ä–æ–ª–µ–º)
  private hashPassword(smsCode: string): string {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ bcrypt –∏–ª–∏ –¥—Ä—É–≥—É—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º btoa –≤–º–µ—Å—Ç–æ Buffer –¥–ª—è React Native —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return btoa(smsCode);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS-–∫–æ–¥–∞/–ø–∞—Ä–æ–ª—è
  private verifyPassword(smsCode: string, hashedPassword: string): boolean {
    return this.hashPassword(smsCode) === hashedPassword;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  private async saveAuthToken(token: string): Promise<void> {
    await AsyncStorage.setItem('authToken', token);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async getAuthToken(): Promise<string | null> {
    return await AsyncStorage.getItem('authToken');
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async removeAuthToken(): Promise<void> {
    await AsyncStorage.removeItem('authToken');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
  async checkUserExists(phoneNumber: string): Promise<{ exists: boolean; user?: AuthUser }> {
    try {
      const user = await this.dbService.getUserByPhone(phoneNumber);
      return { exists: !!user, user: user || undefined };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return { exists: false };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS-–∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async sendLoginCode(phoneNumber: string): Promise<{ success: boolean; userExists: boolean; error?: string }> {
    try {
      console.log('üîÑ AuthService: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:', phoneNumber);
      
      const response = await this.apiCall('/auth/send-code', {
        method: 'POST',
        body: JSON.stringify({ phoneNumber }),
      });

      return {
        success: response.success,
        userExists: response.userExists || false,
        error: response.error
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendLoginCode:', error);
      return { success: false, userExists: false, error: error instanceof Error ? error.message : 'Server error' };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS-–∫–æ–¥–∞ –∏ –≤—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  async verifyLoginCode(phoneNumber: string, code: string): Promise<{ 
    success: boolean; 
    user?: AuthUser; 
    error?: string; 
    needsProfile?: boolean;
    tokens?: { accessToken: string; refreshToken: string };
  }> {
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS-–∫–æ–¥–∞ –¥–ª—è:', phoneNumber);
      
      const response = await this.apiCall('/auth/login', {
        method: 'POST',
        body: JSON.stringify({ phoneNumber, code }),
      });

      if (response.success && response.tokens) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º access token
        await this.saveAuthToken(response.tokens.accessToken);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token –æ—Ç–¥–µ–ª—å–Ω–æ
        await AsyncStorage.setItem('refreshToken', response.tokens.refreshToken);
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É');
        return { 
          success: true, 
          user: response.user,
          tokens: response.tokens
        };
      }

      return response;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Server error' };
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SMS-–∫–æ–¥–∞ (–¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
  async createUserProfile(phoneNumber: string, name: string, smsCode: string): Promise<{ 
    success: boolean; 
    user?: AuthUser; 
    error?: string;
    tokens?: { accessToken: string; refreshToken: string };
  }> {
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', phoneNumber);
      
      const response = await this.apiCall('/auth/register', {
        method: 'POST',
        body: JSON.stringify({
          phoneNumber,
          name: name.trim(),
          code: smsCode
        }),
      });

      if (response.success && response.tokens) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º access token
        await this.saveAuthToken(response.tokens.accessToken);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token –æ—Ç–¥–µ–ª—å–Ω–æ
        await AsyncStorage.setItem('refreshToken', response.tokens.refreshToken);
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        return { 
          success: true, 
          user: response.user,
          tokens: response.tokens
        };
      }

      return response;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Server error' };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getCurrentUser(): Promise<AuthUser | null> {
    try {
      const token = await this.getAuthToken();
      if (!token) return null;

      const response = await this.apiCall('/auth/me');
      return response.success ? response.user : null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  async refreshToken(): Promise<{ success: boolean; tokens?: { accessToken: string; refreshToken: string }; error?: string }> {
    try {
      const refreshToken = await AsyncStorage.getItem('refreshToken');
      if (!refreshToken) {
        return { success: false, error: 'No refresh token available' };
      }

      const response = await fetch(getApiUrl('/auth/refresh'), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ refreshToken }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ error: 'Token refresh failed' }));
        throw new Error(errorData.error || 'Token refresh failed');
      }

      const data = await response.json();
      
      if (data.success && data.tokens) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
        await this.saveAuthToken(data.tokens.accessToken);
        await AsyncStorage.setItem('refreshToken', data.tokens.refreshToken);
        
        return { success: true, tokens: data.tokens };
      }

      return { success: false, error: data.error || 'Token refresh failed' };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Token refresh failed' };
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async logout(): Promise<void> {
    try {
      const refreshToken = await AsyncStorage.getItem('refreshToken');
      
      if (refreshToken) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ –≤—ã—Ö–æ–¥–µ
        await this.apiCall('/auth/logout', {
          method: 'POST',
          body: JSON.stringify({ refreshToken }),
        }).catch(() => {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
          console.warn('Failed to logout on server, continuing with local logout');
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
    } finally {
      // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
      await this.removeAuthToken();
      await AsyncStorage.removeItem('refreshToken');
    }
  }

  // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ç–æ–¥—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ deprecated
  /** @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ */
  async sendVerificationCode(phoneNumber: string, type: 'registration' | 'password_reset'): Promise<boolean> {
    console.warn('‚ö†Ô∏è sendVerificationCode —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode');
    const result = await this.sendLoginCode(phoneNumber);
    return result.success;
  }

  /** @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ verifyLoginCode –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ */
  async verifyCode(phoneNumber: string, code: string, type: 'registration' | 'password_reset'): Promise<boolean> {
    console.warn('‚ö†Ô∏è verifyCode —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ verifyLoginCode');
    const result = await this.verifyLoginCode(phoneNumber, code);
    return result.success;
  }

  /** @deprecated –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ sendLoginCode + createUserProfile */
  async register(data: RegisterRequest): Promise<{ success: boolean; user?: AuthUser; error?: string }> {
    console.warn('‚ö†Ô∏è register —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode + createUserProfile');
    return { success: false, error: 'Method deprecated' };
  }

  /** @deprecated –í—Ö–æ–¥ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ sendLoginCode + verifyLoginCode */
  async login(data: LoginRequest): Promise<{ success: boolean; user?: AuthUser; error?: string }> {
    console.warn('‚ö†Ô∏è login —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode + verifyLoginCode');
    return { success: false, error: 'Method deprecated' };
  }

  /** @deprecated –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ sendLoginCode */
  async resetPassword(data: ResetPasswordRequest): Promise<{ success: boolean; error?: string }> {
    console.warn('‚ö†Ô∏è resetPassword —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode');
    return { success: false, error: 'Method deprecated' };
  }
} 