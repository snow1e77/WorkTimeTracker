import AsyncStorage from '@react-native-async-storage/async-storage';
import { AuthUser, LoginRequest, RegisterRequest, ResetPasswordRequest, SMSVerification } from '../types';
import { DatabaseService } from './DatabaseService';
import { TwilioService } from './TwilioService';

export class AuthService {
  private static instance: AuthService;
  private dbService: DatabaseService;
  private twilioService: TwilioService;

  private constructor() {
    this.dbService = DatabaseService.getInstance();
    this.twilioService = TwilioService.getInstance();
  }

  static getInstance(): AuthService {
    if (!AuthService.instance) {
      AuthService.instance = new AuthService();
    }
    return AuthService.instance;
  }

  // Generate 6-digit SMS code
  private generateSMSCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  // Send SMS through Twilio
  private async sendSMS(phoneNumber: string, code: string, type: 'login' | 'registration'): Promise<boolean> {
    try {
      const result = await this.twilioService.sendVerificationCode(phoneNumber, code, type);
      return result.success;
    } catch (error) {
      console.error('SMS sending error:', error);
      return false;
    }
  }

  // Password hashing for SMS codes (SMS –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–∞—Ä–æ–ª–µ–º)
  private hashPassword(smsCode: string): string {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ bcrypt –∏–ª–∏ –¥—Ä—É–≥—É—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º btoa –≤–º–µ—Å—Ç–æ Buffer –¥–ª—è React Native —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return btoa(smsCode);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS-–∫–æ–¥–∞/–ø–∞—Ä–æ–ª—è
  private verifyPassword(smsCode: string, hashedPassword: string): boolean {
    return this.hashPassword(smsCode) === hashedPassword;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  private async saveAuthToken(userId: string): Promise<void> {
    await AsyncStorage.setItem('authToken', userId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async getAuthToken(): Promise<string | null> {
    return await AsyncStorage.getItem('authToken');
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async removeAuthToken(): Promise<void> {
    await AsyncStorage.removeItem('authToken');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
  async checkUserExists(phoneNumber: string): Promise<{ exists: boolean; user?: AuthUser }> {
    try {
      const user = await this.dbService.getUserByPhone(phoneNumber);
      return { exists: !!user, user: user || undefined };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return { exists: false };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS-–∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async sendLoginCode(phoneNumber: string): Promise<{ success: boolean; userExists: boolean; error?: string }> {
    try {
      console.log('üîÑ AuthService: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:', phoneNumber);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const { exists, user } = await this.checkUserExists(phoneNumber);
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', exists);

      const code = this.generateSMSCode();
      const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç

      console.log('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:', code);

      const verification: SMSVerification = {
        id: Date.now().toString(),
        phoneNumber,
        code,
        type: exists ? 'login' : 'registration',
        isUsed: false,
        expiresAt,
        createdAt: new Date()
      };

      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –ë–î...');
      await this.dbService.saveSMSVerification(verification);

      console.log('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ SMS...');
      const smsResult = await this.sendSMS(phoneNumber, code, exists ? 'login' : 'registration');
      
      if (!smsResult) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS');
        return { success: false, userExists: exists, error: 'Failed to send SMS' };
      }

      console.log('‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return { success: true, userExists: exists };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendLoginCode:', error);
      return { success: false, userExists: false, error: 'Server error' };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS-–∫–æ–¥–∞
  async verifyLoginCode(phoneNumber: string, code: string): Promise<{ success: boolean; user?: AuthUser; error?: string; needsProfile?: boolean }> {
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS-–∫–æ–¥–∞ –¥–ª—è:', phoneNumber);
      
      // –ü–æ–ª—É—á–∞–µ–º SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
      const verification = await this.dbService.getSMSVerification(phoneNumber, 'login') 
        || await this.dbService.getSMSVerification(phoneNumber, 'registration');
      
      if (!verification || verification.isUsed || verification.expiresAt < new Date()) {
        return { success: false, error: 'Invalid or expired code' };
      }

      if (verification.code !== code) {
        return { success: false, error: 'Invalid code' };
      }

      // –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      await this.dbService.markSMSVerificationAsUsed(verification.id);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const { exists, user } = await this.checkUserExists(phoneNumber);

      if (exists && user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø–∞—Ä–æ–ª—å –Ω–æ–≤—ã–º SMS-–∫–æ–¥–æ–º
        const hashedCode = this.hashPassword(code);
        await this.dbService.updateUserPassword(user.id, hashedCode);
        await this.saveAuthToken(user.id);
        console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É');
        return { success: true, user };
      } else {
        // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        console.log('üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
        return { success: true, needsProfile: true };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:', error);
      return { success: false, error: 'Server error' };
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SMS-–∫–æ–¥–∞ (–¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
  async createUserProfile(phoneNumber: string, name: string, smsCode: string): Promise<{ success: boolean; user?: AuthUser; error?: string }> {
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', phoneNumber);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const existingUser = await this.dbService.getUserByPhone(phoneNumber);
      if (existingUser) {
        return { success: false, error: 'User with this phone number already exists' };
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user: AuthUser = {
        id: Date.now().toString(),
        phoneNumber,
        name: name.trim(),
        role: 'worker',
        isVerified: true,
        isActive: true,
        createdAt: new Date()
      };

      console.log('üîÑ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ SMS-–∫–æ–¥–∞ –∫–∞–∫ –ø–∞—Ä–æ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...');
      const hashedCode = this.hashPassword(smsCode);
      await this.dbService.createUser(user, hashedCode);
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      await this.saveAuthToken(user.id);

      return { success: true, user };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      return { success: false, error: 'Server error' };
    }
  }

  // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ç–æ–¥—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ deprecated
  /** @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ */
  async sendVerificationCode(phoneNumber: string, type: 'registration' | 'password_reset'): Promise<boolean> {
    console.warn('‚ö†Ô∏è sendVerificationCode —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode');
    const result = await this.sendLoginCode(phoneNumber);
    return result.success;
  }

  /** @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ verifyLoginCode –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ */
  async verifyCode(phoneNumber: string, code: string, type: 'registration' | 'password_reset'): Promise<boolean> {
    console.warn('‚ö†Ô∏è verifyCode —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ verifyLoginCode');
    const result = await this.verifyLoginCode(phoneNumber, code);
    return result.success;
  }

  /** @deprecated –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ sendLoginCode + createUserProfile */
  async register(data: RegisterRequest): Promise<{ success: boolean; user?: AuthUser; error?: string }> {
    console.warn('‚ö†Ô∏è register —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode + createUserProfile');
    return { success: false, error: 'Method deprecated' };
  }

  /** @deprecated –í—Ö–æ–¥ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ sendLoginCode + verifyLoginCode */
  async login(data: LoginRequest): Promise<{ success: boolean; user?: AuthUser; error?: string }> {
    console.warn('‚ö†Ô∏è login —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode + verifyLoginCode');
    return { success: false, error: 'Method deprecated' };
  }

  /** @deprecated –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ sendLoginCode */
  async resetPassword(data: ResetPasswordRequest): Promise<{ success: boolean; error?: string }> {
    console.warn('‚ö†Ô∏è resetPassword —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sendLoginCode');
    return { success: false, error: 'Method deprecated' };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getCurrentUser(): Promise<AuthUser | null> {
    try {
      const token = await this.getAuthToken();
      if (!token) return null;

      const user = await this.dbService.getUserById(token);
      return user;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async logout(): Promise<void> {
    try {
      await this.removeAuthToken();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    }
  }
} 