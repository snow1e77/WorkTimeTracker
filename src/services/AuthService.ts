import AsyncStorage from '@react-native-async-storage/async-storage';
import { AuthUser, LoginRequest, RegisterRequest, ResetPasswordRequest, SMSVerification } from '../types';
import { DatabaseService } from './DatabaseService';
import { TwilioService } from './TwilioService';

export class AuthService {
  private static instance: AuthService;
  private dbService: DatabaseService;
  private twilioService: TwilioService;

  private constructor() {
    this.dbService = DatabaseService.getInstance();
    this.twilioService = TwilioService.getInstance();
  }

  static getInstance(): AuthService {
    if (!AuthService.instance) {
      AuthService.instance = new AuthService();
    }
    return AuthService.instance;
  }

  // Generate 6-digit SMS code
  private generateSMSCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  // Send SMS through Twilio
  private async sendSMS(phoneNumber: string, code: string, type: 'registration' | 'password_reset'): Promise<boolean> {
    try {
      const result = await this.twilioService.sendVerificationCode(phoneNumber, code, type);
      return result.success;
    } catch (error) {
      console.error('SMS sending error:', error);
      return false;
    }
  }

  // Password hashing (simplified version)
  private hashPassword(password: string): string {
    // In a real application, use bcrypt or another secure library
    return Buffer.from(password).toString('base64');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
  private verifyPassword(password: string, hashedPassword: string): boolean {
    return this.hashPassword(password) === hashedPassword;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  private async saveAuthToken(userId: string): Promise<void> {
    await AsyncStorage.setItem('authToken', userId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async getAuthToken(): Promise<string | null> {
    return await AsyncStorage.getItem('authToken');
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async removeAuthToken(): Promise<void> {
    await AsyncStorage.removeItem('authToken');
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  async sendVerificationCode(phoneNumber: string, type: 'registration' | 'password_reset'): Promise<boolean> {
    try {
      console.log('üîÑ AuthService: Starting verification code sending process');
      console.log('üì± Phone number:', phoneNumber);
      console.log('üîß Type:', type);

      const code = this.generateSMSCode();
      const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç

      console.log('üîë Generated code:', code);
      console.log('‚è∞ Expires at:', expiresAt);

      const verification: SMSVerification = {
        id: Date.now().toString(),
        phoneNumber,
        code,
        type,
        isUsed: false,
        expiresAt,
        createdAt: new Date()
      };

      console.log('üíæ Saving verification to database...');
      await this.dbService.saveSMSVerification(verification);
      console.log('‚úÖ Verification saved to database');

      console.log('üì® Sending SMS...');
      const smsResult = await this.sendSMS(phoneNumber, code, type);
      console.log('üì® SMS result:', smsResult);
      
      if (!smsResult) {
        console.log('‚ùå SMS sending failed');
        return false;
      }

      console.log('‚úÖ Verification code sent successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Error in sendVerificationCode:', error);
      console.error('Error details:', {
        name: (error as Error).name,
        message: (error as Error).message,
        stack: (error as Error).stack
      });
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  async verifyCode(phoneNumber: string, code: string, type: 'registration' | 'password_reset'): Promise<boolean> {
    try {
      const verification = await this.dbService.getSMSVerification(phoneNumber, type);
      
      if (!verification || verification.isUsed || verification.expiresAt < new Date()) {
        return false;
      }

      if (verification.code === code) {
        await this.dbService.markSMSVerificationAsUsed(verification.id);
        return true;
      }

      return false;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:', error);
      return false;
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async register(data: RegisterRequest): Promise<{ success: boolean; user?: AuthUser; error?: string }> {
    try {
      console.log('üîÑ Starting registration for:', data.phoneNumber);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      console.log('üîÑ Checking if user exists...');
      const existingUser = await this.dbService.getUserByPhone(data.phoneNumber);
      if (existingUser) {
        return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      if (data.verificationCode) {
        const isValidCode = await this.verifyCode(data.phoneNumber, data.verificationCode, 'registration');
        if (!isValidCode) {
          return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' };
        }
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const codeSent = await this.sendVerificationCode(data.phoneNumber, 'registration');
        if (!codeSent) {
          return { success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' };
        }
        return { success: false, error: 'CODE_REQUIRED' };
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üîÑ Creating new user...');
      const user: AuthUser = {
        id: Date.now().toString(),
        phoneNumber: data.phoneNumber,
        name: data.name,
        role: 'worker',
        isVerified: true,
        isActive: true,
        createdAt: new Date()
      };

      console.log('üîÑ Hashing password and saving user to database...');
      const hashedPassword = this.hashPassword(data.password);
      await this.dbService.createUser(user, hashedPassword);
      console.log('‚úÖ User created successfully');
      await this.saveAuthToken(user.id);

      return { success: true, user };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      return { success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
  }

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  async login(data: LoginRequest): Promise<{ success: boolean; user?: AuthUser; error?: string }> {
    try {
      const user = await this.dbService.getUserByPhone(data.phoneNumber);
      if (!user) {
        return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      const storedPassword = await this.dbService.getUserPassword(user.id);
      if (!storedPassword || !this.verifyPassword(data.password, storedPassword)) {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' };
      }

      if (!user.isActive) {
        return { success: false, error: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' };
      }

      await this.saveAuthToken(user.id);
      return { success: true, user };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      return { success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  async resetPassword(data: ResetPasswordRequest): Promise<{ success: boolean; error?: string }> {
    try {
      const user = await this.dbService.getUserByPhone(data.phoneNumber);
      if (!user) {
        return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      const isValidCode = await this.verifyCode(data.phoneNumber, data.verificationCode, 'password_reset');
      if (!isValidCode) {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' };
      }

      const hashedPassword = this.hashPassword(data.newPassword);
      await this.dbService.updateUserPassword(user.id, hashedPassword);

      return { success: true };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
      return { success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getCurrentUser(): Promise<AuthUser | null> {
    try {
      const token = await this.getAuthToken();
      if (!token) return null;

      const user = await this.dbService.getUserById(token);
      return user;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async logout(): Promise<void> {
    await this.removeAuthToken();
  }
} 