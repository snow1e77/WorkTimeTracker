import { AuthUser, LoginRequest } from '../types';
import { WebDatabaseService } from './WebDatabaseService';

export class WebAuthService {
  private static instance: WebAuthService;
  private dbService: WebDatabaseService;

  private constructor() {
    this.dbService = WebDatabaseService.getInstance();
  }

  static getInstance(): WebAuthService {
    if (!WebAuthService.instance) {
      WebAuthService.instance = new WebAuthService();
    }
    return WebAuthService.instance;
  }

  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–µ–± –≤–µ—Ä—Å–∏–∏ (–±–µ–∑ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  private verifyPassword(password: string, storedPassword: string): boolean {
    return password === storedPassword;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ localStorage
  private async saveAuthToken(userId: string): Promise<void> {
    localStorage.setItem('authToken', userId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ localStorage
  async getAuthToken(): Promise<string | null> {
    return localStorage.getItem('authToken');
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async removeAuthToken(): Promise<void> {
    localStorage.removeItem('authToken');
  }

  // –ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–Ω –¥–ª—è –≤–µ–± –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
  async login(phoneNumber: string, password: string): Promise<{ success: boolean; user?: AuthUser; error?: string }> {
    try {
      console.log('üîÑ WebAuthService: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è:', phoneNumber);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      await this.dbService.initDatabase();
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const user = await this.dbService.getUserByPhone(phoneNumber);
      
      if (!user) {
        return { success: false, error: 'User not found' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const storedPassword = await this.dbService.getUserPassword(user.id);
      
      if (!storedPassword || !this.verifyPassword(password, storedPassword)) {
        return { success: false, error: 'Invalid credentials' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (!user.isActive) {
        return { success: false, error: 'Account is deactivated' };
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
      await this.saveAuthToken(user.id);
      
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', user.name);
      return { success: true, user };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return { success: false, error: 'Server error' };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
  async getCurrentUser(): Promise<AuthUser | null> {
    try {
      const token = await this.getAuthToken();
      
      if (!token) {
        return null;
      }

      await this.dbService.initDatabase();
      const user = await this.dbService.getUserById(token);
      
      return user && user.isActive ? user : null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async logout(): Promise<void> {
    await this.removeAuthToken();
  }

  // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  async sendVerificationCode(phoneNumber: string): Promise<boolean> {
    // –í –≤–µ–± –≤–µ—Ä—Å–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º SMS
    return false;
  }

  async verifyCode(phoneNumber: string, code: string): Promise<boolean> {
    // –í –≤–µ–± –≤–µ—Ä—Å–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º SMS
    return false;
  }

  async register(data: any): Promise<{ success: boolean; user?: AuthUser; error?: string }> {
    // –í –≤–µ–± –≤–µ—Ä—Å–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    return { success: false, error: 'Registration not supported in web version' };
  }

  async resetPassword(data: any): Promise<{ success: boolean; error?: string }> {
    // –í –≤–µ–± –≤–µ—Ä—Å–∏–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    return { success: false, error: 'Password reset not supported in web version' };
  }
} 