import { 
  SyncPayload, 
  SyncMetadata, 
  SyncConflict, 
  AuthUser, 
  ConstructionSite, 
  UserSiteAssignment,
  WorkShift 
} from '../types';
import { WebDatabaseService } from './WebDatabaseService';

export class WebSyncService {
  private static instance: WebSyncService;
  private dbService: WebDatabaseService;
  private syncInProgress = false;
  private lastSyncTimestamp: Date | null = null;
  private autoSyncInterval: NodeJS.Timeout | null = null;
  private notificationTimeout: NodeJS.Timeout | null = null;
  private apiBaseUrl: string = 'http://localhost:3001/api'; // URL —Å–µ—Ä–≤–µ—Ä–∞

  private constructor() {
    this.dbService = WebDatabaseService.getInstance();
    this.initializeSync();
  }

  static getInstance(): WebSyncService {
    if (!WebSyncService.instance) {
      WebSyncService.instance = new WebSyncService();
    }
    return WebSyncService.instance;
  }

  private async initializeSync(): Promise<void> {
    try {
      const lastSync = localStorage.getItem('worktime_last_sync');
      if (lastSync) {
        this.lastSyncTimestamp = new Date(lastSync);
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      this.startAutoSync();
      
      console.log('üîÑ WebSyncService initialized');
    } catch (error) {
      console.error('Error initializing web sync:', error);
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  public async syncData(): Promise<{ success: boolean; error?: string }> {
    if (this.syncInProgress) {
      return { success: false, error: 'Sync already in progress' };
    }

    this.syncInProgress = true;
    console.log('üîÑ Starting web sync...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const token = localStorage.getItem('worktime_admin_token');
      if (!token) {
        throw new Error('No authentication token found');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const result = await this.sendChangesToServer(token);
      
      if (result.success) {
        this.lastSyncTimestamp = new Date();
        localStorage.setItem('worktime_last_sync', this.lastSyncTimestamp.toISOString());
        console.log('‚úÖ Web sync completed successfully');
      }

      return result;
      
    } catch (error) {
      console.error('‚ùå Web sync failed:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    } finally {
      this.syncInProgress = false;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  private async sendChangesToServer(token: string): Promise<{ success: boolean; error?: string }> {
    try {
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const assignments = await this.dbService.getAllAssignments();
      const sites = await this.dbService.getConstructionSites();
      const users = await this.dbService.getAllUsers();

      const changes = {
        assignments: this.filterChangedAssignments(assignments),
        sites: this.filterChangedSites(sites),
        users: this.filterChangedUsers(users)
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await fetch(`${this.apiBaseUrl}/sync/web-changes`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(changes)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP ${response.status}`);
      }

      const result = await response.json();
      return { success: result.success };

    } catch (error) {
      console.error('Failed to send changes to server:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Network error' };
    }
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
  private filterChangedAssignments(assignments: UserSiteAssignment[]): UserSiteAssignment[] {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    
    return assignments.filter(assignment => 
      new Date(assignment.assignedAt) > oneHourAgo ||
      (this.lastSyncTimestamp && new Date(assignment.assignedAt) > this.lastSyncTimestamp)
    );
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
  private filterChangedSites(sites: ConstructionSite[]): ConstructionSite[] {
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    
    return sites.filter(site => 
      site.updatedAt && new Date(site.updatedAt) > oneHourAgo ||
      (this.lastSyncTimestamp && site.updatedAt && new Date(site.updatedAt) > this.lastSyncTimestamp)
    );
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  private filterChangedUsers(users: AuthUser[]): AuthUser[] {
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    
    return users.filter(user => 
      new Date(user.createdAt) > oneHourAgo ||
      (this.lastSyncTimestamp && new Date(user.createdAt) > this.lastSyncTimestamp)
    );
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
  public async getDataForMobileSync(): Promise<SyncPayload> {
    const users = await this.dbService.getAllUsers();
    const sites = await this.dbService.getConstructionSites();
    const assignments = await this.dbService.getAllAssignments();

    return {
      users,
      sites,
      assignments,
      shifts: [], // –í –¥–µ–º–æ –≤–µ—Ä—Å–∏–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      metadata: [],
      timestamp: new Date(),
      deviceId: 'web-admin'
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  public async processMobileData(payload: SyncPayload): Promise<{ success: boolean; conflicts?: SyncConflict[] }> {
    console.log('üì± Processing mobile sync data:', payload);

    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      // –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ–Ω—ã –æ—Ç –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      if (payload.shifts) {
        for (const shift of payload.shifts) {
          await this.saveMobileShift(shift);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
      if (payload.assignments) {
        for (const assignment of payload.assignments) {
          await this.updateAssignmentFromMobile(assignment);
        }
      }
      
      return { success: true };
    } catch (error) {
      console.error('Error processing mobile data:', error);
      return { success: false };
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–º–µ–Ω—É –æ—Ç –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  private async saveMobileShift(shift: WorkShift): Promise<void> {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
      const shiftsData = localStorage.getItem('worktime_mobile_shifts');
      const shifts = shiftsData ? JSON.parse(shiftsData) : [];
      
      const existingIndex = shifts.findIndex((s: WorkShift) => s.id === shift.id);
      if (existingIndex >= 0) {
        shifts[existingIndex] = shift;
      } else {
        shifts.push(shift);
      }
      
      localStorage.setItem('worktime_mobile_shifts', JSON.stringify(shifts));
      console.log('üì± Mobile shift saved:', shift.id);
    } catch (error) {
      console.error('Failed to save mobile shift:', error);
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  private async updateAssignmentFromMobile(assignment: UserSiteAssignment): Promise<void> {
    try {
      await this.dbService.updateAssignment(assignment.id, assignment);
      console.log('üì± Assignment updated from mobile:', assignment.id);
    } catch (error) {
      console.error('Failed to update assignment from mobile:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  public getSyncStatus(): {
    lastSync: Date | null;
    isInProgress: boolean;
    nextSync: Date | null;
  } {
    return {
      lastSync: this.lastSyncTimestamp,
      isInProgress: this.syncInProgress,
      nextSync: this.lastSyncTimestamp 
        ? new Date(this.lastSyncTimestamp.getTime() + 5 * 60 * 1000) // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        : null
    };
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
  public async syncAssignments(): Promise<{ success: boolean; error?: string }> {
    try {
      console.log('üîÑ Syncing assignments...');
      
      const result = await this.syncData();
      
      if (result.success) {
        console.log('‚úÖ Assignments synced successfully');
      }
      
      return result;
    } catch (error) {
      console.error('Error syncing assignments:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  public startAutoSync(): void {
    if (this.autoSyncInterval) {
      clearInterval(this.autoSyncInterval);
    }

    this.autoSyncInterval = setInterval(async () => {
      if (!this.syncInProgress) {
        console.log('üîÑ Auto-sync triggered');
        await this.syncData();
      }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

    console.log('‚úÖ Auto-sync started (every 5 minutes)');
  }

  public stopAutoSync(): void {
    if (this.autoSyncInterval) {
      clearInterval(this.autoSyncInterval);
      this.autoSyncInterval = null;
      console.log('‚èπÔ∏è Auto-sync stopped');
    }

    // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (this.notificationTimeout) {
      clearTimeout(this.notificationTimeout);
      this.notificationTimeout = null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  public async getSyncHistory(): Promise<any[]> {
    try {
      const token = localStorage.getItem('worktime_admin_token');
      if (!token) {
        return [];
      }

      const response = await fetch(`${this.apiBaseUrl}/sync/history`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const result = await response.json();
      return result.data || [];

    } catch (error) {
      console.error('Failed to get sync history:', error);
      return [];
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  public async forceFullSync(): Promise<{ success: boolean; error?: string }> {
    try {
      console.log('üîÑ Starting forced full sync...');
      
      const result = await this.syncData();
      
      if (result.success) {
        console.log('‚úÖ Full sync completed successfully');
        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        localStorage.removeItem('worktime_last_sync');
        this.lastSyncTimestamp = new Date();
        localStorage.setItem('worktime_last_sync', this.lastSyncTimestamp.toISOString());
      }
      
      return result;
    } catch (error) {
      console.error('Full sync failed:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  public async notifyAssignmentChange(assignment: UserSiteAssignment): Promise<void> {
    console.log('üì° Assignment changed, triggering sync:', assignment.id);
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (this.notificationTimeout) {
      clearTimeout(this.notificationTimeout);
    }
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
    this.notificationTimeout = setTimeout(() => {
      this.notificationTimeout = null;
      this.syncAssignments();
    }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
  public async checkServerConnection(): Promise<boolean> {
    try {
      const response = await fetch(`${this.apiBaseUrl}/health`, {
        method: 'GET',
        timeout: 5000
      } as RequestInit);

      return response.ok;
    } catch (error) {
      console.warn('Server connection check failed:', error);
      return false;
    }
  }
} 