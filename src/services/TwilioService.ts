import { APP_CONFIG } from '../config/appConfig';

export interface SMSResult {
  success: boolean;
  messageId?: string;
  error?: string;
}

export class TwilioService {
  private static instance: TwilioService;
  private config = APP_CONFIG.TWILIO_CONFIG;
  private baseUrl = 'https://api.twilio.com/2010-04-01';

  private constructor() {}

  static getInstance(): TwilioService {
    if (!TwilioService.instance) {
      TwilioService.instance = new TwilioService();
    }
    return TwilioService.instance;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Twilio API
   */
  private getAuthHeaders(): Record<string, string> {
    const credentials = `${this.config.ACCOUNT_SID}:${this.config.AUTH_TOKEN}`;
    const encodedCredentials = btoa(credentials);
    
    return {
      'Authorization': `Basic ${encodedCredentials}`,
      'Content-Type': 'application/x-www-form-urlencoded',
    };
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ URL-encoded —Å—Ç—Ä–æ–∫—É
   */
  private encodeFormData(data: Record<string, string>): string {
    return Object.keys(data)
      .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`)
      .join('&');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ Twilio REST API
   */
  async sendSMS(
    to: string,
    message: string,
    from?: string
  ): Promise<SMSResult> {
    try {
      console.log('üöÄ TwilioService: Attempting to send SMS');
      console.log('üì± To:', to);
      console.log('üí¨ Message:', message);
      console.log('üîß Config check:', {
        hasAccountSid: !!this.config.ACCOUNT_SID,
        hasAuthToken: !!this.config.AUTH_TOKEN,
        hasFromNumber: !!this.config.FROM_NUMBER
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
      if (!this.isValidPhoneNumber(to)) {
        console.log('‚ùå Invalid phone number format:', to);
        return {
          success: false,
          error: 'Invalid phone number format. Use international format (+1234567890)'
        };
      }

      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞
      const preflightResult = await this.preflightCheck(to);
      if (!preflightResult.canSend) {
        console.log('‚ö†Ô∏è Region check failed:', preflightResult.warning);
        return {
          success: false,
          error: preflightResult.warning || 'Region not supported'
        };
      }

      const fromNumber = from || this.config.FROM_NUMBER;
      const url = `${this.baseUrl}/Accounts/${this.config.ACCOUNT_SID}/Messages.json`;

      console.log('üåê API URL:', url);
      console.log('üì§ From number:', fromNumber);

      const formData = this.encodeFormData({
        To: to,
        From: fromNumber,
        Body: message
      });

      console.log('üìã Form data:', formData);

      const response = await fetch(url, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: formData
      });

      console.log('üì° Response status:', response.status);
      console.log('üì° Response headers:', Object.fromEntries(response.headers.entries()));

      const responseData = await response.json();
      console.log('üìÑ Response data:', responseData);

      if (response.ok) {
        console.log('‚úÖ SMS sent successfully, ID:', responseData.sid);
        return {
          success: true,
          messageId: responseData.sid
        };
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Twilio
        const errorMessage = this.getTwilioErrorMessage(responseData.code, responseData.message);
        console.log('‚ùå Twilio API error:', {
          code: responseData.code,
          message: responseData.message,
          details: responseData.more_info || 'No additional info'
        });
        return {
          success: false,
          error: errorMessage
        };
      }

    } catch (error: any) {
      console.error('‚ùå Network/Fetch Error:', error);
      console.error('Error details:', {
        name: error.name,
        message: error.message,
        stack: error.stack
      });
      return {
        success: false,
        error: `Network error: ${error.message}`
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   */
  async sendVerificationCode(
    phoneNumber: string,
    code: string,
    type: 'registration' | 'password_reset'
  ): Promise<SMSResult> {
    const messages = {
      registration: `Your WorkTime Tracker verification code: ${code}. Valid for 10 minutes.`,
      password_reset: `Your WorkTime Tracker password reset code: ${code}. Valid for 10 minutes.`
    };

    return await this.sendSMS(phoneNumber, messages[type]);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  private isValidPhoneNumber(phoneNumber: string): boolean {
    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const phoneRegex = /^\+[1-9]\d{1,14}$/;
    return phoneRegex.test(phoneNumber);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  private getCountryCodeFromPhone(phoneNumber: string): string {
    if (phoneNumber.startsWith('+1')) return 'US'; // –°–®–ê/–ö–∞–Ω–∞–¥–∞
    if (phoneNumber.startsWith('+7')) return 'RU'; // –†–æ—Å—Å–∏—è/–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
    if (phoneNumber.startsWith('+44')) return 'GB'; // –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è
    if (phoneNumber.startsWith('+49')) return 'DE'; // –ì–µ—Ä–º–∞–Ω–∏—è
    if (phoneNumber.startsWith('+33')) return 'FR'; // –§—Ä–∞–Ω—Ü–∏—è
    if (phoneNumber.startsWith('+46')) return 'SE'; // –®–≤–µ—Ü–∏—è
    if (phoneNumber.startsWith('+47')) return 'NO'; // –ù–æ—Ä–≤–µ–≥–∏—è
    if (phoneNumber.startsWith('+372')) return 'EE'; // –≠—Å—Ç–æ–Ω–∏—è
    if (phoneNumber.startsWith('+358')) return 'FI'; // –§–∏–Ω–ª—è–Ω–¥–∏—è
    // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–æ–¥–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    return 'UNKNOWN';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞
   */
  private isRegionSupported(phoneNumber: string): boolean {
    const countryCode = this.getCountryCodeFromPhone(phoneNumber);
    return this.config.SUPPORTED_REGIONS?.includes(countryCode) || false;
  }

  /**
   * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π SMS
   */
  private async preflightCheck(phoneNumber: string): Promise<{ canSend: boolean; warning?: string }> {
    const countryCode = this.getCountryCodeFromPhone(phoneNumber);
    const isSupported = this.isRegionSupported(phoneNumber);
    
    if (!isSupported) {
      return {
        canSend: false,
        warning: `Region ${countryCode} is not enabled in Twilio Geo Permissions. Please enable it in Twilio Console.`
      };
    }
    
    return { canSend: true };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ Twilio
   */
  private getTwilioErrorMessage(code: number, message: string): string {
    switch (code) {
      case 21211:
        return 'Invalid phone number format';
      case 21614:
        return 'Invalid sender number. Check your Twilio phone number';
      case 21408:
        return 'SMS to this region is not enabled. Please enable geographic permissions for this country in Twilio Console ‚Üí Messaging ‚Üí Settings ‚Üí Geo Permissions';
      case 30007:
        return 'Message delivery failed';
      case 20003:
        return 'Authentication failed. Check your Account SID and Auth Token';
      case 21606:
        return 'Phone number not verified. Add to verified numbers in Twilio Console';
      default:
        return `Twilio error (${code}): ${message}`;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ Twilio
   */
  async getAccountInfo(): Promise<any> {
    try {
      const url = `${this.baseUrl}/Accounts/${this.config.ACCOUNT_SID}.json`;
      
      const response = await fetch(url, {
        method: 'GET',
        headers: this.getAuthHeaders()
      });

      if (response.ok) {
        const data = await response.json();
        return {
          friendlyName: data.friendly_name,
          status: data.status,
          type: data.type
        };
      }
      return null;
    } catch (error) {
      console.error('Failed to fetch account info:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
   */
  async getAvailableNumbers(): Promise<string[]> {
    try {
      const url = `${this.baseUrl}/Accounts/${this.config.ACCOUNT_SID}/IncomingPhoneNumbers.json`;
      
      const response = await fetch(url, {
        method: 'GET',
        headers: this.getAuthHeaders()
      });

      if (response.ok) {
        const data = await response.json();
        return data.incoming_phone_numbers.map((number: any) => number.phone_number);
      }
      return [];
    } catch (error) {
      console.error('Failed to fetch phone numbers:', error);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async getMessageStatus(messageId: string): Promise<string | null> {
    try {
      const url = `${this.baseUrl}/Accounts/${this.config.ACCOUNT_SID}/Messages/${messageId}.json`;
      
      const response = await fetch(url, {
        method: 'GET',
        headers: this.getAuthHeaders()
      });

      if (response.ok) {
        const data = await response.json();
        return data.status;
      }
      return null;
    } catch (error) {
      console.error('Failed to fetch message status:', error);
      return null;
    }
  }
} 