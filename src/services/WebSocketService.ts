import AsyncStorage from '@react-native-async-storage/async-storage';
import { io, Socket } from 'socket.io-client';

export class WebSocketService {
  private static instance: WebSocketService;
  private socket: Socket | null = null;
  private isConnected = false;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 1000;
  private reconnectTimeout: NodeJS.Timeout | null = null;

  private constructor() {}

  static getInstance(): WebSocketService {
    if (!WebSocketService.instance) {
      WebSocketService.instance = new WebSocketService();
    }
    return WebSocketService.instance;
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
  async connect(): Promise<boolean> {
    try {
      const token = await AsyncStorage.getItem('authToken');
      
      if (!token) {
        console.warn('No auth token found, cannot connect to WebSocket');
        return false;
      }

      const serverUrl = 'http://localhost:3001';
      
      console.log('üîå Connecting to WebSocket server...');
      
      this.socket = io(serverUrl, {
        auth: {
          token
        },
        transports: ['websocket', 'polling'],
        timeout: 10000,
        forceNew: true
      });

      this.setupEventHandlers();
      
      return new Promise((resolve) => {
        this.socket!.on('connect', () => {
          console.log('‚úÖ Connected to WebSocket server');
          this.isConnected = true;
          this.reconnectAttempts = 0;
          resolve(true);
        });

        this.socket!.on('connect_error', (error) => {
          console.error('‚ùå WebSocket connection error:', error);
          this.isConnected = false;
          resolve(false);
        });

        // Timeout –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
          if (!this.isConnected) {
            console.warn('‚è∞ WebSocket connection timeout');
            resolve(false);
          }
        }, 10000);
      });
    } catch (error) {
      console.error('Failed to connect to WebSocket:', error);
      return false;
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  private setupEventHandlers(): void {
    if (!this.socket) return;

    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    this.socket.on('connected', (data) => {
      console.log('üì± WebSocket connected:', data.message);
    });

    this.socket.on('disconnect', (reason) => {
      console.log('üì± WebSocket disconnected:', reason);
      this.isConnected = false;
      this.handleReconnect();
    });

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    this.socket.on('sync_response', (data) => {
      console.log('üîÑ Sync response received:', data);
      this.handleSyncResponse(data);
    });

    this.socket.on('sync_error', (data) => {
      console.error('‚ùå Sync error:', data);
    });

    // –°–º–µ–Ω—ã
    this.socket.on('shift_start_confirmed', (data) => {
      console.log('‚ñ∂Ô∏è Shift start confirmed:', data);
    });

    this.socket.on('shift_end_confirmed', (data) => {
      console.log('‚èπÔ∏è Shift end confirmed:', data);
    });

    this.socket.on('shift_start_error', (data) => {
      console.error('‚ùå Shift start error:', data);
    });

    this.socket.on('shift_end_error', (data) => {
      console.error('‚ùå Shift end error:', data);
    });

    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è
    this.socket.on('new_assignment', (data) => {
      console.log('üìã New assignment received:', data);
      this.handleNewAssignment(data);
    });

    this.socket.on('assignment_updated', (data) => {
      console.log('üìã Assignment updated:', data);
      this.handleAssignmentUpdate(data);
    });

    this.socket.on('assignment_created_confirmed', (data) => {
      console.log('‚úÖ Assignment creation confirmed:', data);
    });

    // –ü—Ä–æ—Ñ–∏–ª—å
    this.socket.on('profile_updated', (data) => {
      console.log('üë§ Profile updated:', data);
      this.handleProfileUpdate(data);
    });

    // –û–±—ä–µ–∫—Ç—ã
    this.socket.on('site_updated', (data) => {
      console.log('üèóÔ∏è Site updated:', data);
      this.handleSiteUpdate(data);
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  private handleReconnect(): void {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('üö´ Max reconnection attempts reached');
      return;
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
    }

    this.reconnectAttempts++;
    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);
    
    console.log(`üîÑ Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts}) in ${delay}ms...`);
    
    this.reconnectTimeout = setTimeout(() => {
      this.reconnectTimeout = null;
      this.connect();
    }, delay);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  async requestSync(data: Record<string, unknown>): Promise<void> {
    if (!this.isConnected || !this.socket) {
      console.warn('WebSocket not connected, cannot request sync');
      return;
    }

    console.log('üì§ Requesting sync:', data);
    this.socket.emit('sync_request', data);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã
  async notifyShiftStarted(data: {
    shiftId: string;
    siteId: string;
    siteName?: string;
    location?: { latitude: number; longitude: number };
  }): Promise<void> {
    if (!this.isConnected || !this.socket) {
      console.warn('WebSocket not connected, cannot notify shift start');
      return;
    }

    console.log('üì§ Notifying shift started:', data);
    this.socket.emit('shift_started', data);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–º–µ–Ω—ã
  async notifyShiftEnded(data: {
    shiftId: string;
    duration?: number;
    location?: { latitude: number; longitude: number };
  }): Promise<void> {
    if (!this.isConnected || !this.socket) {
      console.warn('WebSocket not connected, cannot notify shift end');
      return;
    }

    console.log('üì§ Notifying shift ended:', data);
    this.socket.emit('shift_ended', data);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async notifyAssignmentCreated(data: {
    assignmentId: string;
    userId: string;
    siteId: string;
    siteName?: string;
    validFrom?: Date;
    validTo?: Date;
    notes?: string;
  }): Promise<void> {
    if (!this.isConnected || !this.socket) {
      console.warn('WebSocket not connected, cannot notify assignment creation');
      return;
    }

    console.log('üì§ Notifying assignment created:', data);
    this.socket.emit('assignment_created', data);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
  private handleSyncResponse(data: Record<string, unknown>): void {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.log('Processing sync response:', data);
  }

  private handleNewAssignment(data: Record<string, unknown>): void {
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
    // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å UI
    console.log('Processing new assignment:', data);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    // –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  }

  private handleAssignmentUpdate(data: Record<string, unknown>): void {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    console.log('Processing assignment update:', data);
  }

  private handleProfileUpdate(data: Record<string, unknown>): void {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('Processing profile update:', data);
  }

  private handleSiteUpdate(data: Record<string, unknown>): void {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    console.log('Processing site update:', data);
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket
  disconnect(): void {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }

    if (this.socket) {
      console.log('üîå Disconnecting from WebSocket server...');
      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  isSocketConnected(): boolean {
    return this.isConnected && this.socket?.connected === true;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  getConnectionInfo(): {
    connected: boolean;
    reconnectAttempts: number;
    socketId?: string;
  } {
    return {
      connected: this.isConnected,
      reconnectAttempts: this.reconnectAttempts,
      socketId: this.socket?.id
    };
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
  on(event: string, callback: (data: Record<string, unknown>) => void): void {
    if (this.socket) {
      this.socket.on(event, callback);
    }
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è
  off(event: string, callback?: (data: Record<string, unknown>) => void): void {
    if (this.socket) {
      this.socket.off(event, callback);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
  emit(event: string, data: Record<string, unknown>): void {
    if (this.isConnected && this.socket) {
      this.socket.emit(event, data);
    } else {
      console.warn(`Cannot emit ${event}: WebSocket not connected`);
    }
  }
} 