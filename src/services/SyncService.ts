import AsyncStorage from '@react-native-async-storage/async-storage';
import { 
  SyncPayload, 
  SyncMetadata, 
  SyncConflict, 
  AuthUser, 
  ConstructionSite, 
  UserSiteAssignment,
  WorkShift 
} from '../types';
import { ApiDatabaseService } from './ApiDatabaseService';
import { WebSocketService } from './WebSocketService';

// –ù–æ–≤—ã–µ —Ç–∏–ø—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
interface SyncOperation {
  id: string;
  type: 'create' | 'update' | 'delete';
  entityType: 'user' | 'site' | 'assignment' | 'shift';
  entityId: string;
  data: any;
  timestamp: Date;
  attempts: number;
  maxAttempts: number;
  status: 'pending' | 'syncing' | 'completed' | 'failed';
}

interface SyncQueue {
  operations: SyncOperation[];
  lastProcessed: Date | null;
}

interface SyncStatus {
  isOnline: boolean;
  lastSyncTime: Date | null;
  pendingOperations: number;
  failedOperations: number;
  isInProgress: boolean;
  error?: string;
}

export class SyncService {
  private static instance: SyncService;
  private dbService: ApiDatabaseService;
  private webSocketService: WebSocketService;
  private syncInProgress = false;
  private lastSyncTimestamp: Date | null = null;
  private deviceId: string = '';
  private syncQueue: SyncQueue = { operations: [], lastProcessed: null };
  private retryInterval: NodeJS.Timeout | null = null;
  private queueProcessorInterval: NodeJS.Timeout | null = null;
  private syncStatusCallbacks: Array<(status: SyncStatus) => void> = [];
  private maxRetryAttempts = 3;
  private retryDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥
  private retryTimeouts: Set<NodeJS.Timeout> = new Set();

  private constructor() {
    this.dbService = ApiDatabaseService.getInstance();
    this.webSocketService = WebSocketService.getInstance();
    this.initializeDeviceId();
    this.setupWebSocketConnection();
    this.loadSyncQueue();
    this.startQueueProcessor();
  }

  static getInstance(): SyncService {
    if (!SyncService.instance) {
      SyncService.instance = new SyncService();
    }
    return SyncService.instance;
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  public onSyncStatusChange(callback: (status: SyncStatus) => void): () => void {
    this.syncStatusCallbacks.push(callback);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      const index = this.syncStatusCallbacks.indexOf(callback);
      if (index > -1) {
        this.syncStatusCallbacks.splice(index, 1);
      }
    };
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
  private notifySyncStatusChange(): void {
    const status = this.getSyncStatus();
    this.syncStatusCallbacks.forEach(callback => callback(status));
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  public getSyncStatus(): SyncStatus {
    return {
      isOnline: this.isOnline(),
      lastSyncTime: this.lastSyncTimestamp,
      pendingOperations: this.syncQueue.operations.filter(op => op.status === 'pending').length,
      failedOperations: this.syncQueue.operations.filter(op => op.status === 'failed').length,
      isInProgress: this.syncInProgress
    };
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  private async loadSyncQueue(): Promise<void> {
    try {
      const queueJson = await AsyncStorage.getItem('syncQueue');
      if (queueJson) {
        this.syncQueue = JSON.parse(queueJson);
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Date –æ–±—ä–µ–∫—Ç—ã
        this.syncQueue.operations = this.syncQueue.operations.map(op => ({
          ...op,
          timestamp: new Date(op.timestamp)
        }));
        if (this.syncQueue.lastProcessed) {
          this.syncQueue.lastProcessed = new Date(this.syncQueue.lastProcessed);
        }
      }
    } catch (error) {
      console.error('Failed to load sync queue:', error);
      this.syncQueue = { operations: [], lastProcessed: null };
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  private async saveSyncQueue(): Promise<void> {
    try {
      await AsyncStorage.setItem('syncQueue', JSON.stringify(this.syncQueue));
    } catch (error) {
      console.error('Failed to save sync queue:', error);
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥—å
  public async addToSyncQueue(
    type: SyncOperation['type'],
    entityType: SyncOperation['entityType'],
    entityId: string,
    data: any
  ): Promise<void> {
    const operation: SyncOperation = {
      id: `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type,
      entityType,
      entityId,
      data,
      timestamp: new Date(),
      attempts: 0,
      maxAttempts: this.maxRetryAttempts,
      status: 'pending'
    };

    this.syncQueue.operations.push(operation);
    await this.saveSyncQueue();
    
    console.log(`‚ûï Added operation to sync queue: ${type} ${entityType} ${entityId}`);
    this.notifySyncStatusChange();

    // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω, —Å—Ä–∞–∑—É –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    if (this.isOnline()) {
      this.processQueueOperation(operation);
    }
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏
  private startQueueProcessor(): void {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (this.queueProcessorInterval) {
      clearInterval(this.queueProcessorInterval);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    this.queueProcessorInterval = setInterval(() => {
      if (this.isOnline() && !this.syncInProgress) {
        this.processQueue();
      }
    }, 30000);
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π
  private async processQueue(): Promise<void> {
    const pendingOperations = this.syncQueue.operations.filter(
      op => op.status === 'pending' || (op.status === 'failed' && op.attempts < op.maxAttempts)
    );

    if (pendingOperations.length === 0) return;

    console.log(`üîÑ Processing ${pendingOperations.length} queued operations`);

    for (const operation of pendingOperations) {
      if (!this.isOnline()) break;
      await this.processQueueOperation(operation);
    }

    this.syncQueue.lastProcessed = new Date();
    await this.saveSyncQueue();
    this.notifySyncStatusChange();
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  private async processQueueOperation(operation: SyncOperation): Promise<void> {
    if (operation.status === 'syncing') return;

    operation.status = 'syncing';
    operation.attempts++;

    try {
      console.log(`üîÑ Processing operation: ${operation.type} ${operation.entityType} ${operation.entityId} (attempt ${operation.attempts})`);

      switch (operation.entityType) {
        case 'shift':
          await this.syncShiftOperation(operation);
          break;
        case 'assignment':
          await this.syncAssignmentOperation(operation);
          break;
        case 'user':
          await this.syncUserOperation(operation);
          break;
        case 'site':
          await this.syncSiteOperation(operation);
          break;
      }

      operation.status = 'completed';
      console.log(`‚úÖ Operation completed: ${operation.type} ${operation.entityType} ${operation.entityId}`);

    } catch (error) {
      console.error(`‚ùå Operation failed: ${operation.type} ${operation.entityType} ${operation.entityId}`, error);
      
      if (operation.attempts >= operation.maxAttempts) {
        operation.status = 'failed';
        console.error(`üí• Operation permanently failed after ${operation.attempts} attempts`);
      } else {
        operation.status = 'pending';
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        const retryTimeout = setTimeout(() => {
          this.retryTimeouts.delete(retryTimeout);
          this.processQueueOperation(operation);
        }, this.retryDelay * operation.attempts);
        this.retryTimeouts.add(retryTimeout);
      }
    }

    await this.saveSyncQueue();
    this.notifySyncStatusChange();
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å–º–µ–Ω–∞–º–∏
  private async syncShiftOperation(operation: SyncOperation): Promise<void> {
    const token = await AsyncStorage.getItem('authToken');
    if (!token) throw new Error('No authentication token');

    const response = await fetch('http://localhost:3001/api/sync/shift', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        operation: operation.type,
        entityId: operation.entityId,
        data: operation.data,
        deviceId: this.deviceId
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || `HTTP ${response.status}`);
    }

    const result = await response.json();
    if (!result.success) {
      throw new Error(result.error || 'Operation failed');
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  private async syncAssignmentOperation(operation: SyncOperation): Promise<void> {
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ syncShiftOperation, –Ω–æ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
    const token = await AsyncStorage.getItem('authToken');
    if (!token) throw new Error('No authentication token');

    const response = await fetch('http://localhost:3001/api/sync/assignment', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        operation: operation.type,
        entityId: operation.entityId,
        data: operation.data,
        deviceId: this.deviceId
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || `HTTP ${response.status}`);
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  private async syncUserOperation(operation: SyncOperation): Promise<void> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('Syncing user operation:', operation);
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
  private async syncSiteOperation(operation: SyncOperation): Promise<void> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
    console.log('Syncing site operation:', operation);
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  private isOnline(): boolean {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
    return true;
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  public async cleanupQueue(): Promise<void> {
    const before = this.syncQueue.operations.length;
    
    // –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
    const cutoffTime = new Date(Date.now() - 24 * 60 * 60 * 1000);
    this.syncQueue.operations = this.syncQueue.operations.filter(
      op => op.status !== 'completed' || new Date(op.timestamp) > cutoffTime
    );

    const after = this.syncQueue.operations.length;
    
    if (before !== after) {
      await this.saveSyncQueue();
      console.log(`üßπ Cleaned up ${before - after} completed operations from queue`);
      this.notifySyncStatusChange();
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
  public getQueueStats(): {
    total: number;
    pending: number;
    completed: number;
    failed: number;
    oldestPending?: Date;
  } {
    const stats = {
      total: this.syncQueue.operations.length,
      pending: 0,
      completed: 0,
      failed: 0,
      oldestPending: undefined as Date | undefined
    };

    let oldestPendingTime: number | null = null;

    this.syncQueue.operations.forEach(op => {
      switch (op.status) {
        case 'pending':
          stats.pending++;
          const opTime = new Date(op.timestamp).getTime();
          if (!oldestPendingTime || opTime < oldestPendingTime) {
            oldestPendingTime = opTime;
            stats.oldestPending = new Date(op.timestamp);
          }
          break;
        case 'completed':
          stats.completed++;
          break;
        case 'failed':
          stats.failed++;
          break;
      }
    });

    return stats;
  }

  private async initializeDeviceId(): Promise<void> {
    try {
      let deviceId = await AsyncStorage.getItem('deviceId');
      if (!deviceId) {
        deviceId = `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        await AsyncStorage.setItem('deviceId', deviceId);
      }
      this.deviceId = deviceId;
    } catch (error) {
      console.error('Failed to initialize device ID:', error);
      this.deviceId = `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  private async getLastSyncTimestamp(): Promise<Date | null> {
    try {
      const timestamp = await AsyncStorage.getItem('lastSyncTimestamp');
      return timestamp ? new Date(timestamp) : null;
    } catch (error) {
      console.error('Failed to get last sync timestamp:', error);
      return null;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  private async setLastSyncTimestamp(timestamp: Date): Promise<void> {
    try {
      await AsyncStorage.setItem('lastSyncTimestamp', timestamp.toISOString());
      this.lastSyncTimestamp = timestamp;
    } catch (error) {
      console.error('Failed to set last sync timestamp:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  public async needsSync(): Promise<boolean> {
    const lastSync = await this.getLastSyncTimestamp();
    if (!lastSync) return true;

    const now = new Date();
    const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);
    return lastSync < fiveMinutesAgo;
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  public async sync(force: boolean = false): Promise<{ success: boolean; error?: string }> {
    if (this.syncInProgress) {
      return { success: false, error: 'Sync already in progress' };
    }

    if (!force && !(await this.needsSync())) {
      return { success: true };
    }

    this.syncInProgress = true;
    console.log('üîÑ Starting sync process...');

    try {
      // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const outgoingData = await this.prepareOutgoingData();
      
      // 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const syncResult = await this.sendDataToServer(outgoingData);
      
      // 3. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      if (syncResult.success && syncResult.incomingData) {
        await this.processIncomingData(syncResult.incomingData);
      }
      
      // 4. –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await this.setLastSyncTimestamp(new Date());
      
      console.log('‚úÖ Sync completed successfully');
      return { success: true };
    } catch (error) {
      console.error('‚ùå Sync failed:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    } finally {
      this.syncInProgress = false;
    }
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  private async prepareOutgoingData(): Promise<SyncPayload> {
    const lastSync = await this.getLastSyncTimestamp();
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const pendingMetadata = await this.getPendingMetadata(lastSync);
    
    const payload: SyncPayload = {
      metadata: pendingMetadata,
      timestamp: new Date(),
      deviceId: this.deviceId,
    };

    // –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    for (const meta of pendingMetadata) {
      switch (meta.entityType) {
        case 'user':
          if (!payload.users) payload.users = [];
          const user = await this.dbService.getUserById(meta.entityId);
          if (user) payload.users.push(user);
          break;
        case 'shift':
          if (!payload.shifts) payload.shifts = [];
          const shift = await this.getShiftById(meta.entityId);
          if (shift) payload.shifts.push(shift);
          break;
      }
    }

    return payload;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  private async getPendingMetadata(since: Date | null): Promise<SyncMetadata[]> {
    try {
      const metadataJson = await AsyncStorage.getItem('pendingSync');
      if (!metadataJson) return [];

      const allMetadata: SyncMetadata[] = JSON.parse(metadataJson);
      
      if (!since) return allMetadata;

      return allMetadata.filter(meta => 
        meta.syncStatus === 'pending' && 
        new Date(meta.lastModified) > since
      );
    } catch (error) {
      console.error('Failed to get pending metadata:', error);
      return [];
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  private async sendDataToServer(payload: SyncPayload): Promise<{ 
    success: boolean; 
    incomingData?: SyncPayload; 
    conflicts?: SyncConflict[] 
  }> {
    try {
      console.log('üì§ Sending data to server:', payload);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const token = await AsyncStorage.getItem('authToken');
      if (!token) {
        throw new Error('No authentication token found');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä
      const response = await fetch('http://localhost:3001/api/sync', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          deviceId: this.deviceId,
          lastSyncTimestamp: this.lastSyncTimestamp,
          data: {
            shifts: payload.shifts,
            assignments: payload.assignments
          }
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      
      if (result.success) {
        return {
          success: true,
          incomingData: result.data.serverData
        };
      } else {
        throw new Error(result.error || 'Server returned error');
      }
      
    } catch (error) {
      console.error('Failed to send data to server:', error);
      
      // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º –≤–µ–±-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      console.log('üì§ Falling back to local web panel data...');
      const incomingData = await this.getDataFromWebPanel();
      
      return {
        success: true,
        incomingData
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–± –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
  private async getDataFromWebPanel(): Promise<SyncPayload> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
      // –°–µ–π—á–∞—Å —á–∏—Ç–∞–µ–º –∏–∑ localStorage (—ç–º—É–ª—è—Ü–∏—è)
      
      const webUsers = JSON.parse(localStorage.getItem('worktime_users') || '[]');
      const webSites = JSON.parse(localStorage.getItem('worktime_sites') || '[]');
      const webAssignments = JSON.parse(localStorage.getItem('worktime_assignments') || '[]');
      
      return {
        users: webUsers,
        sites: webSites,
        assignments: webAssignments,
        metadata: [],
        timestamp: new Date(),
        deviceId: 'web_admin_panel'
      };
    } catch (error) {
      console.error('Failed to get data from web panel:', error);
      return {
        metadata: [],
        timestamp: new Date(),
        deviceId: 'web_admin_panel'
      };
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  private async processIncomingData(data: SyncPayload): Promise<void> {
    console.log('üì• Processing incoming data:', data);

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (data.users) {
      for (const user of data.users) {
        await this.syncUser(user);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã
    if (data.sites) {
      for (const site of data.sites) {
        await this.syncSite(site);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    if (data.assignments) {
      for (const assignment of data.assignments) {
        await this.syncAssignment(assignment);
      }
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async syncUser(user: AuthUser): Promise<void> {
    try {
      const existingUser = await this.dbService.getUserById(user.id);
      
      if (existingUser) {
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.updateUser(user);
      } else {
        // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.createUser(user);
      }
    } catch (error) {
      console.error('Failed to sync user:', error);
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç
  private async syncSite(site: ConstructionSite): Promise<void> {
    try {
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
      await this.saveSiteToLocal(site);
    } catch (error) {
      console.error('Failed to sync site:', error);
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
  private async syncAssignment(assignment: UserSiteAssignment): Promise<void> {
    try {
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
      await this.saveAssignmentToLocal(assignment);
    } catch (error) {
      console.error('Failed to sync assignment:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—ä–µ–∫—Ç—ã
  public async getUserAssignedSites(userId: string): Promise<ConstructionSite[]> {
    try {
      const assignments = await this.getUserAssignments(userId);
      const sites: ConstructionSite[] = [];
      
      for (const assignment of assignments) {
        if (assignment.isActive) {
          const site = await this.getSiteById(assignment.siteId);
          if (site) {
            sites.push(site);
          }
        }
      }
      
      return sites;
    } catch (error) {
      console.error('Failed to get user assigned sites:', error);
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –æ–±—ä–µ–∫—Ç–µ
  public async canUserWorkOnSite(userId: string, siteId: string): Promise<boolean> {
    try {
      const assignments = await this.getUserAssignments(userId);
      
      return assignments.some(assignment => 
        assignment.siteId === siteId && 
        assignment.isActive &&
        (!assignment.validFrom || new Date(assignment.validFrom) <= new Date()) &&
        (!assignment.validTo || new Date(assignment.validTo) >= new Date())
      );
    } catch (error) {
      console.error('Failed to check user site access:', error);
      return false;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  private async updateUser(user: AuthUser): Promise<void> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    console.log('Updating user:', user.id);
  }

  private async createUser(user: AuthUser): Promise<void> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    console.log('Creating user:', user.id);
  }

  private async saveSiteToLocal(site: ConstructionSite): Promise<void> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    console.log('Saving site:', site.id);
  }

  private async saveAssignmentToLocal(assignment: UserSiteAssignment): Promise<void> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    console.log('Saving assignment:', assignment.id);
  }

  private async getUserAssignments(userId: string): Promise<UserSiteAssignment[]> {
    try {
      const assignmentsJson = await AsyncStorage.getItem(`assignments_${userId}`);
      return assignmentsJson ? JSON.parse(assignmentsJson) : [];
    } catch (error) {
      console.error('Failed to get user assignments:', error);
      return [];
    }
  }

  private async getSiteById(siteId: string): Promise<ConstructionSite | null> {
    try {
      const sitesJson = await AsyncStorage.getItem('local_sites');
      if (!sitesJson) return null;
      
      const sites: ConstructionSite[] = JSON.parse(sitesJson);
      return sites.find(site => site.id === siteId) || null;
    } catch (error) {
      console.error('Failed to get site by ID:', error);
      return null;
    }
  }

  private async getShiftById(shiftId: string): Promise<WorkShift | null> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω—ã –ø–æ ID
    console.log('Getting shift:', shiftId);
    return null;
  }

  // –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  public async addSyncMetadata(
    entityType: SyncMetadata['entityType'],
    entityId: string,
    operation: 'create' | 'update' | 'delete'
  ): Promise<void> {
    try {
      const metadata: SyncMetadata = {
        entityType,
        entityId,
        lastModified: new Date(),
        version: 1,
        deviceId: this.deviceId,
        syncStatus: 'pending'
      };

      const existingJson = await AsyncStorage.getItem('pendingSync');
      const existing: SyncMetadata[] = existingJson ? JSON.parse(existingJson) : [];
      
      // –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
      const filtered = existing.filter(meta => 
        !(meta.entityType === entityType && meta.entityId === entityId)
      );
      
      filtered.push(metadata);
      
      await AsyncStorage.setItem('pendingSync', JSON.stringify(filtered));
    } catch (error) {
      console.error('Failed to add sync metadata:', error);
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  public startAutoSync(): void {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (this.retryInterval) {
      clearInterval(this.retryInterval);
    }

    this.retryInterval = setInterval(async () => {
      if (await this.needsSync()) {
        await this.sync();
      }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
  public stopAllTimers(): void {
    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
    if (this.queueProcessorInterval) {
      clearInterval(this.queueProcessorInterval);
      this.queueProcessorInterval = null;
    }

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (this.retryInterval) {
      clearInterval(this.retryInterval);
      this.retryInterval = null;
    }

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    this.retryTimeouts.forEach(timeout => clearTimeout(timeout));
    this.retryTimeouts.clear();

    console.log('üßπ All SyncService timers have been cleared');
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  public async forcSync(): Promise<{ success: boolean; error?: string }> {
    return await this.sync(true);
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  private async setupWebSocketConnection(): Promise<void> {
    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
      const connected = await this.webSocketService.connect();
      
      if (connected) {
        console.log('‚úÖ WebSocket connected for sync service');
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.webSocketService.on('sync_response', (data) => {
          this.handleWebSocketSyncResponse(data);
        });

        this.webSocketService.on('new_assignment', (data) => {
          this.handleNewAssignmentFromWebSocket(data);
        });

        this.webSocketService.on('assignment_updated', (data) => {
          this.handleAssignmentUpdateFromWebSocket(data);
        });
      }
    } catch (error) {
      console.error('Failed to setup WebSocket connection:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ WebSocket
  private async handleWebSocketSyncResponse(data: any): Promise<void> {
    console.log('üîÑ Handling WebSocket sync response:', data);
    
    if (data.success) {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await this.sync(true);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
  private async handleNewAssignmentFromWebSocket(data: any): Promise<void> {
    console.log('üìã Handling new assignment from WebSocket:', data);
    
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await this.sync(true);
    } catch (error) {
      console.error('Failed to handle new assignment from WebSocket:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
  private async handleAssignmentUpdateFromWebSocket(data: any): Promise<void> {
    console.log('üìã Handling assignment update from WebSocket:', data);
    
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await this.sync(true);
    } catch (error) {
      console.error('Failed to handle assignment update from WebSocket:', error);
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket
  public async notifyShiftStarted(data: {
    shiftId: string;
    siteId: string;
    siteName?: string;
    location?: { latitude: number; longitude: number };
  }): Promise<void> {
    await this.webSocketService.notifyShiftStarted(data);
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–º–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket
  public async notifyShiftEnded(data: {
    shiftId: string;
    duration?: number;
    location?: { latitude: number; longitude: number };
  }): Promise<void> {
    await this.webSocketService.notifyShiftEnded(data);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  public isWebSocketConnected(): boolean {
    return this.webSocketService.isSocketConnected();
  }

  // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
  public async reconnectWebSocket(): Promise<boolean> {
    return await this.webSocketService.connect();
  }
} 