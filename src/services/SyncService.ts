import AsyncStorage from '@react-native-async-storage/async-storage';
import { 
  SyncPayload, 
  SyncMetadata, 
  SyncConflict, 
  AuthUser, 
  ConstructionSite, 
  UserSiteAssignment,
  WorkShift 
} from '../types';
import { DatabaseService } from './DatabaseService';

export class SyncService {
  private static instance: SyncService;
  private dbService: DatabaseService;
  private syncInProgress = false;
  private lastSyncTimestamp: Date | null = null;
  private deviceId: string = '';

  private constructor() {
    this.dbService = DatabaseService.getInstance();
    this.initializeDeviceId();
  }

  static getInstance(): SyncService {
    if (!SyncService.instance) {
      SyncService.instance = new SyncService();
    }
    return SyncService.instance;
  }

  private async initializeDeviceId(): Promise<void> {
    try {
      let deviceId = await AsyncStorage.getItem('deviceId');
      if (!deviceId) {
        deviceId = `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        await AsyncStorage.setItem('deviceId', deviceId);
      }
      this.deviceId = deviceId;
    } catch (error) {
      console.error('Failed to initialize device ID:', error);
      this.deviceId = `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  private async getLastSyncTimestamp(): Promise<Date | null> {
    try {
      const timestamp = await AsyncStorage.getItem('lastSyncTimestamp');
      return timestamp ? new Date(timestamp) : null;
    } catch (error) {
      console.error('Failed to get last sync timestamp:', error);
      return null;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  private async setLastSyncTimestamp(timestamp: Date): Promise<void> {
    try {
      await AsyncStorage.setItem('lastSyncTimestamp', timestamp.toISOString());
      this.lastSyncTimestamp = timestamp;
    } catch (error) {
      console.error('Failed to set last sync timestamp:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  public async needsSync(): Promise<boolean> {
    const lastSync = await this.getLastSyncTimestamp();
    if (!lastSync) return true;

    const now = new Date();
    const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);
    return lastSync < fiveMinutesAgo;
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  public async sync(force: boolean = false): Promise<{ success: boolean; error?: string }> {
    if (this.syncInProgress) {
      return { success: false, error: 'Sync already in progress' };
    }

    if (!force && !(await this.needsSync())) {
      return { success: true };
    }

    this.syncInProgress = true;
    console.log('üîÑ Starting sync process...');

    try {
      // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const outgoingData = await this.prepareOutgoingData();
      
      // 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const syncResult = await this.sendDataToServer(outgoingData);
      
      // 3. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      if (syncResult.success && syncResult.incomingData) {
        await this.processIncomingData(syncResult.incomingData);
      }
      
      // 4. –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await this.setLastSyncTimestamp(new Date());
      
      console.log('‚úÖ Sync completed successfully');
      return { success: true };
    } catch (error) {
      console.error('‚ùå Sync failed:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    } finally {
      this.syncInProgress = false;
    }
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  private async prepareOutgoingData(): Promise<SyncPayload> {
    const lastSync = await this.getLastSyncTimestamp();
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const pendingMetadata = await this.getPendingMetadata(lastSync);
    
    const payload: SyncPayload = {
      metadata: pendingMetadata,
      timestamp: new Date(),
      deviceId: this.deviceId,
    };

    // –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    for (const meta of pendingMetadata) {
      switch (meta.entityType) {
        case 'user':
          if (!payload.users) payload.users = [];
          const user = await this.dbService.getUserById(meta.entityId);
          if (user) payload.users.push(user);
          break;
        case 'shift':
          if (!payload.shifts) payload.shifts = [];
          const shift = await this.getShiftById(meta.entityId);
          if (shift) payload.shifts.push(shift);
          break;
      }
    }

    return payload;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  private async getPendingMetadata(since: Date | null): Promise<SyncMetadata[]> {
    try {
      const metadataJson = await AsyncStorage.getItem('pendingSync');
      if (!metadataJson) return [];

      const allMetadata: SyncMetadata[] = JSON.parse(metadataJson);
      
      if (!since) return allMetadata;

      return allMetadata.filter(meta => 
        meta.syncStatus === 'pending' && 
        new Date(meta.lastModified) > since
      );
    } catch (error) {
      console.error('Failed to get pending metadata:', error);
      return [];
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∏–º–∏—Ç–∞—Ü–∏—è API)
  private async sendDataToServer(payload: SyncPayload): Promise<{ 
    success: boolean; 
    incomingData?: SyncPayload; 
    conflicts?: SyncConflict[] 
  }> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å
      console.log('üì§ Sending data to server:', payload);
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ (–∏–∑ –≤–µ–± –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
      const incomingData = await this.getDataFromWebPanel();
      
      return {
        success: true,
        incomingData
      };
    } catch (error) {
      console.error('Failed to send data to server:', error);
      return { success: false };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–± –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
  private async getDataFromWebPanel(): Promise<SyncPayload> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
      // –°–µ–π—á–∞—Å —á–∏—Ç–∞–µ–º –∏–∑ localStorage (—ç–º—É–ª—è—Ü–∏—è)
      
      const webUsers = JSON.parse(localStorage.getItem('worktime_users') || '[]');
      const webSites = JSON.parse(localStorage.getItem('worktime_sites') || '[]');
      const webAssignments = JSON.parse(localStorage.getItem('worktime_assignments') || '[]');
      
      return {
        users: webUsers,
        sites: webSites,
        assignments: webAssignments,
        metadata: [],
        timestamp: new Date(),
        deviceId: 'web_admin_panel'
      };
    } catch (error) {
      console.error('Failed to get data from web panel:', error);
      return {
        metadata: [],
        timestamp: new Date(),
        deviceId: 'web_admin_panel'
      };
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  private async processIncomingData(data: SyncPayload): Promise<void> {
    console.log('üì• Processing incoming data:', data);

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (data.users) {
      for (const user of data.users) {
        await this.syncUser(user);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã
    if (data.sites) {
      for (const site of data.sites) {
        await this.syncSite(site);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    if (data.assignments) {
      for (const assignment of data.assignments) {
        await this.syncAssignment(assignment);
      }
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async syncUser(user: AuthUser): Promise<void> {
    try {
      const existingUser = await this.dbService.getUserById(user.id);
      
      if (existingUser) {
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.updateUser(user);
      } else {
        // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.createUser(user);
      }
    } catch (error) {
      console.error('Failed to sync user:', error);
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç
  private async syncSite(site: ConstructionSite): Promise<void> {
    try {
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
      await this.saveSiteToLocal(site);
    } catch (error) {
      console.error('Failed to sync site:', error);
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
  private async syncAssignment(assignment: UserSiteAssignment): Promise<void> {
    try {
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
      await this.saveAssignmentToLocal(assignment);
    } catch (error) {
      console.error('Failed to sync assignment:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—ä–µ–∫—Ç—ã
  public async getUserAssignedSites(userId: string): Promise<ConstructionSite[]> {
    try {
      const assignments = await this.getUserAssignments(userId);
      const sites: ConstructionSite[] = [];
      
      for (const assignment of assignments) {
        if (assignment.isActive) {
          const site = await this.getSiteById(assignment.siteId);
          if (site) {
            sites.push(site);
          }
        }
      }
      
      return sites;
    } catch (error) {
      console.error('Failed to get user assigned sites:', error);
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –æ–±—ä–µ–∫—Ç–µ
  public async canUserWorkOnSite(userId: string, siteId: string): Promise<boolean> {
    try {
      const assignments = await this.getUserAssignments(userId);
      
      return assignments.some(assignment => 
        assignment.siteId === siteId && 
        assignment.isActive &&
        (!assignment.validFrom || new Date(assignment.validFrom) <= new Date()) &&
        (!assignment.validTo || new Date(assignment.validTo) >= new Date())
      );
    } catch (error) {
      console.error('Failed to check user site access:', error);
      return false;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  private async updateUser(user: AuthUser): Promise<void> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    console.log('Updating user:', user.id);
  }

  private async createUser(user: AuthUser): Promise<void> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    console.log('Creating user:', user.id);
  }

  private async saveSiteToLocal(site: ConstructionSite): Promise<void> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    console.log('Saving site:', site.id);
  }

  private async saveAssignmentToLocal(assignment: UserSiteAssignment): Promise<void> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    console.log('Saving assignment:', assignment.id);
  }

  private async getUserAssignments(userId: string): Promise<UserSiteAssignment[]> {
    try {
      const assignmentsJson = await AsyncStorage.getItem(`assignments_${userId}`);
      return assignmentsJson ? JSON.parse(assignmentsJson) : [];
    } catch (error) {
      console.error('Failed to get user assignments:', error);
      return [];
    }
  }

  private async getSiteById(siteId: string): Promise<ConstructionSite | null> {
    try {
      const sitesJson = await AsyncStorage.getItem('local_sites');
      if (!sitesJson) return null;
      
      const sites: ConstructionSite[] = JSON.parse(sitesJson);
      return sites.find(site => site.id === siteId) || null;
    } catch (error) {
      console.error('Failed to get site by ID:', error);
      return null;
    }
  }

  private async getShiftById(shiftId: string): Promise<WorkShift | null> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω—ã –ø–æ ID
    console.log('Getting shift:', shiftId);
    return null;
  }

  // –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  public async addSyncMetadata(
    entityType: SyncMetadata['entityType'],
    entityId: string,
    operation: 'create' | 'update' | 'delete'
  ): Promise<void> {
    try {
      const metadata: SyncMetadata = {
        entityType,
        entityId,
        lastModified: new Date(),
        version: 1,
        deviceId: this.deviceId,
        syncStatus: 'pending'
      };

      const existingJson = await AsyncStorage.getItem('pendingSync');
      const existing: SyncMetadata[] = existingJson ? JSON.parse(existingJson) : [];
      
      // –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
      const filtered = existing.filter(meta => 
        !(meta.entityType === entityType && meta.entityId === entityId)
      );
      
      filtered.push(metadata);
      
      await AsyncStorage.setItem('pendingSync', JSON.stringify(filtered));
    } catch (error) {
      console.error('Failed to add sync metadata:', error);
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  public startAutoSync(): void {
    setInterval(async () => {
      if (await this.needsSync()) {
        await this.sync();
      }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  public async forcSync(): Promise<{ success: boolean; error?: string }> {
    return await this.sync(true);
  }
} 