import { parsePhoneNumber, isValidPhoneNumber, formatIncompletePhoneNumber, AsYouType, CountryCode, PhoneNumber } from 'libphonenumber-js';
import * as Location from 'expo-location';

// –ú–∞–ø–ø–∏–Ω–≥ ISO –∫–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω –∫ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –∫–æ–¥–∞–º
const COUNTRY_TO_PHONE_CODE_MAPPING: Record<string, CountryCode> = {
  'US': 'US', // United States
  'CA': 'CA', // Canada
  'GB': 'GB', // United Kingdom
  'DE': 'DE', // Germany
  'FR': 'FR', // France
  'ES': 'ES', // Spain
  'IT': 'IT', // Italy
  'RU': 'RU', // Russia
  'CN': 'CN', // China
  'JP': 'JP', // Japan
  'KR': 'KR', // South Korea
  'AU': 'AU', // Australia
  'IN': 'IN', // India
  'BR': 'BR', // Brazil
  'MX': 'MX', // Mexico
  'SE': 'SE', // Sweden
  'NO': 'NO', // Norway
  'FI': 'FI', // Finland
  'DK': 'DK', // Denmark
  'NL': 'NL', // Netherlands
  'BE': 'BE', // Belgium
  'CH': 'CH', // Switzerland
  'AT': 'AT', // Austria
  'PL': 'PL', // Poland
  'CZ': 'CZ', // Czech Republic
  'UA': 'UA', // Ukraine
  'AR': 'AR', // Argentina
  'CL': 'CL', // Chile
  'CO': 'CO', // Colombia
  'PE': 'PE', // Peru
  'AE': 'AE', // United Arab Emirates
  'SA': 'SA', // Saudi Arabia
  'ZA': 'ZA', // South Africa
  'EG': 'EG', // Egypt
  'IL': 'IL', // Israel
  'TR': 'TR', // Turkey
  'SG': 'SG', // Singapore
  'HK': 'HK', // Hong Kong
  'TW': 'TW', // Taiwan
  'TH': 'TH', // Thailand
  'MY': 'MY', // Malaysia
  'ID': 'ID', // Indonesia
  'PH': 'PH', // Philippines
  'VN': 'VN', // Vietnam
  'NZ': 'NZ', // New Zealand
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
 */
export const detectUserCountryByLocation = async (): Promise<CountryCode | null> => {
  try {
    console.log('üåç –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é...');
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    const { status } = await Location.requestForegroundPermissionsAsync();
    
    if (status !== 'granted') {
      console.log('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
      return null;
    }

    console.log('üìç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º...');
    
    // –§—É–Ω–∫—Ü–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    const locationWithTimeout = Promise.race([
      Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.Balanced,
      }),
      new Promise<never>((_, reject) => 
        setTimeout(() => reject(new Error('Location timeout')), 3000) // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
      )
    ]);

    const location = await locationWithTimeout;
    console.log(`üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: ${location.coords.latitude}, ${location.coords.longitude}`);

    console.log('üó∫Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º...');
    
    // –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const geocodeWithTimeout = Promise.race([
      Location.reverseGeocodeAsync({
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
      }),
      new Promise<never>((_, reject) => 
        setTimeout(() => reject(new Error('Geocoding timeout')), 3000) // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
      )
    ]);

    const reverseGeocode = await geocodeWithTimeout;

    if (reverseGeocode && reverseGeocode.length > 0) {
      const address = reverseGeocode[0];
      const isoCountryCode = address.isoCountryCode;
      
      console.log(`üèÅ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: ${isoCountryCode} (${address.country || 'Unknown'})`);
      
      if (isoCountryCode && COUNTRY_TO_PHONE_CODE_MAPPING[isoCountryCode]) {
        return COUNTRY_TO_PHONE_CODE_MAPPING[isoCountryCode];
      }
    }

    console.log('‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
    return null;
  } catch (error: any) {
    if (error?.message === 'Location timeout') {
      console.warn('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (3 —Å–µ–∫)');
    } else if (error?.message === 'Geocoding timeout') {
      console.warn('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ (3 —Å–µ–∫)');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
    }
    return null;
  }
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É (fallback –º–µ—Ç–æ–¥)
 */
export const detectUserCountryByTimezone = (): CountryCode | null => {
  try {
    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    console.log(`üïê –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É: ${timezone}`);

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏
    const timezoneToCountry: Record<string, CountryCode> = {
      // –°–®–ê
      'America/New_York': 'US',
      'America/Los_Angeles': 'US',
      'America/Chicago': 'US',
      'America/Denver': 'US',
      'America/Phoenix': 'US',
      'America/Anchorage': 'US',
      'Pacific/Honolulu': 'US',
      
      // –ö–∞–Ω–∞–¥–∞
      'America/Toronto': 'CA',
      'America/Vancouver': 'CA',
      'America/Montreal': 'CA',
      'America/Winnipeg': 'CA',
      'America/Halifax': 'CA',
      
      // –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è –∏ –ò—Ä–ª–∞–Ω–¥–∏—è
      'Europe/London': 'GB',
      'Europe/Dublin': 'GB',
      
      // –ó–∞–ø–∞–¥–Ω–∞—è –ï–≤—Ä–æ–ø–∞
      'Europe/Berlin': 'DE',
      'Europe/Paris': 'FR',
      'Europe/Madrid': 'ES',
      'Europe/Rome': 'IT',
      'Europe/Amsterdam': 'NL',
      'Europe/Brussels': 'BE',
      'Europe/Zurich': 'CH',
      'Europe/Vienna': 'AT',
      'Europe/Stockholm': 'SE',
      'Europe/Oslo': 'NO',
      'Europe/Helsinki': 'FI',
      'Europe/Copenhagen': 'DK',
      
      // –í–æ—Å—Ç–æ—á–Ω–∞—è –ï–≤—Ä–æ–ø–∞
      'Europe/Warsaw': 'PL',
      'Europe/Prague': 'CZ',
      'Europe/Kiev': 'UA',
      'Europe/Bucharest': 'RU', // –ë–ª–∏–∂–µ –∫ –†–æ—Å—Å–∏–∏ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
      
      // –†–æ—Å—Å–∏—è - –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
      'Europe/Moscow': 'RU',
      'Europe/Kaliningrad': 'RU',
      'Europe/Volgograd': 'RU',
      'Europe/Samara': 'RU',
      'Asia/Yekaterinburg': 'RU',    // ‚Üê –≠—Ç–æ —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å!
      'Asia/Omsk': 'RU',
      'Asia/Novosibirsk': 'RU',
      'Asia/Krasnoyarsk': 'RU',
      'Asia/Irkutsk': 'RU',
      'Asia/Yakutsk': 'RU',
      'Asia/Vladivostok': 'RU',
      'Asia/Magadan': 'RU',
      'Asia/Kamchatka': 'RU',
      'Asia/Sakhalin': 'RU',
      'Asia/Chukotka': 'RU',
      
      // –ê–∑–∏—è
      'Asia/Shanghai': 'CN',
      'Asia/Beijing': 'CN',
      'Asia/Hong_Kong': 'HK',
      'Asia/Tokyo': 'JP',
      'Asia/Seoul': 'KR',
      'Asia/Kolkata': 'IN',
      'Asia/Mumbai': 'IN',
      'Asia/Singapore': 'SG',
      'Asia/Bangkok': 'TH',
      'Asia/Kuala_Lumpur': 'MY',
      'Asia/Jakarta': 'ID',
      'Asia/Manila': 'PH',
      'Asia/Ho_Chi_Minh': 'VN',
      'Asia/Taipei': 'TW',
      
      // –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫
      'Asia/Dubai': 'AE',
      'Asia/Riyadh': 'SA',
      'Asia/Tel_Aviv': 'IL',
      'Europe/Istanbul': 'TR',
      
      // –ê—Ñ—Ä–∏–∫–∞
      'Africa/Cairo': 'EG',
      'Africa/Johannesburg': 'ZA',
      
      // –û–∫–µ–∞–Ω–∏—è
      'Australia/Sydney': 'AU',
      'Australia/Melbourne': 'AU',
      'Australia/Perth': 'AU',
      'Pacific/Auckland': 'NZ',
      
      // –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞
      'America/Sao_Paulo': 'BR',
      'America/Buenos_Aires': 'AR',
      'America/Santiago': 'CL',
      'America/Lima': 'PE',
      'America/Bogota': 'CO',
      'America/Mexico_City': 'MX',
    };

    if (timezoneToCountry[timezone]) {
      console.log(`üèÅ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É: ${timezoneToCountry[timezone]} (${timezone})`);
      return timezoneToCountry[timezone];
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    if (timezone.includes('Asia/') && (timezone.includes('Russia') || timezone.includes('Yekaterinburg') || timezone.includes('Omsk') || timezone.includes('Novosibirsk'))) {
      console.log(`üá∑üá∫ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RU`);
      return 'RU';
    }

    console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}`);
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É:', error);
    return null;
  }
};

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
 */
export const autoDetectUserCountry = async (): Promise<CountryCode> => {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    const locationCountry = await detectUserCountryByLocation();
    if (locationCountry) {
      console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ${locationCountry}`);
      return locationCountry;
    }

    // Fallback: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
    const timezoneCountry = detectUserCountryByTimezone();
    if (timezoneCountry) {
      console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É: ${timezoneCountry}`);
      return timezoneCountry;
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –°–®–ê –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º US –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    return 'US';
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã:', error);
    return 'US';
  }
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null
 */
export const detectCountryFromPhoneNumber = (phoneNumber: string): CountryCode | null => {
  try {
    const parsedNumber = parsePhoneNumber(phoneNumber);
    return parsedNumber?.country || null;
  } catch {
    return null;
  }
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export const formatInternationalPhoneNumber = (phoneNumber: string, countryCode?: CountryCode): string => {
  try {
    // –ï—Å–ª–∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (!countryCode) {
      const parsedNumber = parsePhoneNumber(phoneNumber);
      if (parsedNumber) {
        return parsedNumber.formatInternational();
      }
    } else {
      const parsedNumber = parsePhoneNumber(phoneNumber, countryCode);
      if (parsedNumber) {
        return parsedNumber.formatInternational();
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ "–Ω–∞ –ª–µ—Ç—É"
    return formatIncompletePhoneNumber(phoneNumber);
  } catch {
    return phoneNumber;
  }
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
export const formatNationalPhoneNumber = (phoneNumber: string, countryCode?: CountryCode): string => {
  try {
    if (!countryCode) {
      const parsedNumber = parsePhoneNumber(phoneNumber);
      if (parsedNumber) {
        return parsedNumber.formatNational();
      }
    } else {
      const parsedNumber = parsePhoneNumber(phoneNumber, countryCode);
      if (parsedNumber) {
        return parsedNumber.formatNational();
      }
    }
    
    return formatIncompletePhoneNumber(phoneNumber);
  } catch {
    return phoneNumber;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export const isValidInternationalPhoneNumber = (phoneNumber: string, countryCode?: CountryCode): boolean => {
  try {
    if (!countryCode) {
      return isValidPhoneNumber(phoneNumber);
    }
    return isValidPhoneNumber(phoneNumber, countryCode);
  } catch {
    return false;
  }
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å—Ç—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ E.164
 */
export const getCleanInternationalPhoneNumber = (phoneNumber: string, countryCode?: CountryCode): string => {
  try {
    let parsedNumber: PhoneNumber | undefined;
    
    if (!countryCode) {
      parsedNumber = parsePhoneNumber(phoneNumber);
    } else {
      parsedNumber = parsePhoneNumber(phoneNumber, countryCode);
    }
    
    if (parsedNumber) {
      return parsedNumber.format('E.164');
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã —Å –ø–ª—é—Å–æ–º
    const digitsOnly = phoneNumber.replace(/\D/g, '');
    return digitsOnly.startsWith('+') ? phoneNumber : '+' + digitsOnly;
  } catch {
    const digitsOnly = phoneNumber.replace(/\D/g, '');
    return '+' + digitsOnly;
  }
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ "–Ω–∞ –ª–µ—Ç—É" –ø—Ä–∏ –≤–≤–æ–¥–µ
 */
export const formatPhoneNumberAsYouType = (input: string, countryCode?: CountryCode): string => {
  try {
    const formatter = new AsYouType(countryCode);
    return formatter.input(input);
  } catch {
    return input;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export const getPhoneNumberInfo = (phoneNumber: string, countryCode?: CountryCode) => {
  try {
    let parsedNumber: PhoneNumber | undefined;
    
    if (!countryCode) {
      parsedNumber = parsePhoneNumber(phoneNumber);
    } else {
      parsedNumber = parsePhoneNumber(phoneNumber, countryCode);
    }
    
    if (parsedNumber) {
      return {
        isValid: parsedNumber.isValid(),
        country: parsedNumber.country,
        countryCallingCode: parsedNumber.countryCallingCode,
        nationalNumber: parsedNumber.nationalNumber,
        international: parsedNumber.formatInternational(),
        national: parsedNumber.formatNational(),
        e164: parsedNumber.format('E.164'),
        type: parsedNumber.getType()
      };
    }
    
    return null;
  } catch {
    return null;
  }
};

/**
 * Returns a hint for entering a phone number
 */
export const getPhoneNumberHint = (countryCode?: CountryCode): string => {
  if (countryCode) {
    // Some examples for popular countries
    const examples: Record<string, string> = {
      'US': '+1 (555) 123-4567',
      'GB': '+44 20 7946 0958',
      'DE': '+49 30 12345678',
      'FR': '+33 1 23 45 67 89',
      'RU': '+7 495 123-45-67',
      'CN': '+86 138 0013 8000',
      'JP': '+81 90 1234 5678',
      'KR': '+82 2 1234 5678',
      'AU': '+61 2 1234 5678',
      'CA': '+1 (416) 123-4567',
      'IN': '+91 98765 43210',
      'BR': '+55 11 99999-9999',
      'MX': '+52 55 1234 5678',
      'ES': '+34 912 34 56 78',
      'IT': '+39 06 1234 5678',
      'SE': '+46 8 123 456 78',
      'NO': '+47 123 45 678',
      'FI': '+358 50 123 4567',
      'DK': '+45 12 34 56 78',
      'NL': '+31 6 12345678',
      'BE': '+32 2 123 45 67',
      'CH': '+41 44 123 45 67',
      'AT': '+43 1 234 5678',
      'PL': '+48 12 345 67 89',
      'CZ': '+420 123 456 789',
      'UA': '+380 44 123 4567',
    };
    
    return examples[countryCode] || `Format: +${countryCode} XXXX XXXX`;
  }
  
  return 'Enter number with country code, e.g.: +1 555 123 4567';
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
 */
export const getExamplePhoneNumber = (countryCode?: CountryCode): string => {
  return getPhoneNumberHint(countryCode);
};

/**
 * –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
 */
export const POPULAR_COUNTRY_CODES: Array<{code: CountryCode, name: string, callingCode: string}> = [
  { code: 'US', name: 'United States', callingCode: '+1' },
  { code: 'CA', name: 'Canada', callingCode: '+1' },
  { code: 'GB', name: 'United Kingdom', callingCode: '+44' },
  { code: 'DE', name: 'Germany', callingCode: '+49' },
  { code: 'FR', name: 'France', callingCode: '+33' },
  { code: 'ES', name: 'Spain', callingCode: '+34' },
  { code: 'IT', name: 'Italy', callingCode: '+39' },
  { code: 'RU', name: 'Russia', callingCode: '+7' },
  { code: 'CN', name: 'China', callingCode: '+86' },
  { code: 'JP', name: 'Japan', callingCode: '+81' },
  { code: 'KR', name: 'South Korea', callingCode: '+82' },
  { code: 'AU', name: 'Australia', callingCode: '+61' },
  { code: 'IN', name: 'India', callingCode: '+91' },
  { code: 'BR', name: 'Brazil', callingCode: '+55' },
  { code: 'MX', name: 'Mexico', callingCode: '+52' },
  { code: 'SE', name: 'Sweden', callingCode: '+46' },
  { code: 'NO', name: 'Norway', callingCode: '+47' },
  { code: 'FI', name: 'Finland', callingCode: '+358' },
  { code: 'DK', name: 'Denmark', callingCode: '+45' },
  { code: 'NL', name: 'Netherlands', callingCode: '+31' },
  { code: 'BE', name: 'Belgium', callingCode: '+32' },
  { code: 'CH', name: 'Switzerland', callingCode: '+41' },
  { code: 'AT', name: 'Austria', callingCode: '+43' },
  { code: 'PL', name: 'Poland', callingCode: '+48' },
  { code: 'CZ', name: 'Czech Republic', callingCode: '+420' },
  { code: 'UA', name: 'Ukraine', callingCode: '+380' },
];

// –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export const formatUSPhoneNumber = (phoneNumber: string): string => formatInternationalPhoneNumber(phoneNumber, 'US');
export const formatSwedishPhoneNumber = (phoneNumber: string): string => formatInternationalPhoneNumber(phoneNumber, 'SE');
export const isValidUSPhoneNumber = (phoneNumber: string): boolean => isValidInternationalPhoneNumber(phoneNumber, 'US');
export const isValidSwedishPhoneNumber = (phoneNumber: string): boolean => isValidInternationalPhoneNumber(phoneNumber, 'SE');
export const getCleanPhoneNumber = (phoneNumber: string): string => getCleanInternationalPhoneNumber(phoneNumber);
export const formatPhoneNumberForDisplay = (phoneNumber: string): string => formatInternationalPhoneNumber(phoneNumber); 