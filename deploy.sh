#!/bin/bash

# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è WorkTimeTracker
# –°–µ—Ä–≤–µ—Ä: 185.132.127.139 (AlmaLinux)
# –î–æ–º–µ–Ω: gabygg.nu

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DOMAIN="gabygg.nu"
SERVER_IP="185.132.127.139"
SERVER_USER="root"
SERVER_PASSWORD="aJttmb8rQuJIbvDP"
PROJECT_NAME="WorkTimeTracker"
PROJECT_DIR="/opt/$PROJECT_NAME"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
check_requirements() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    command -v docker >/dev/null 2>&1 || { error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker —Å–Ω–∞—á–∞–ª–∞."; }
    command -v docker-compose >/dev/null 2>&1 || { error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."; }
    command -v ssh >/dev/null 2>&1 || { error "SSH –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω."; }
    
    log "‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
exec_remote() {
    local cmd="$1"
    sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" "$cmd"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
copy_to_server() {
    local src="$1"
    local dest="$2"
    sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no -r "$src" "$SERVER_USER@$SERVER_IP:$dest"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
install_dependencies() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
    
    exec_remote "dnf update -y"
    exec_remote "dnf install -y epel-release"
    exec_remote "dnf install -y docker docker-compose git curl wget nano firewalld fail2ban sshpass"
    
    # –ó–∞–ø—É—Å–∫ Docker
    exec_remote "systemctl start docker"
    exec_remote "systemctl enable docker"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewalld
    exec_remote "systemctl start firewalld"
    exec_remote "systemctl enable firewalld"
    exec_remote "firewall-cmd --permanent --add-service=http"
    exec_remote "firewall-cmd --permanent --add-service=https"
    exec_remote "firewall-cmd --permanent --add-service=ssh"
    exec_remote "firewall-cmd --reload"
    
    log "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
generate_passwords() {
    log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π..."
    
    export RANDOM_DB_PASSWORD=$(openssl rand -base64 32 | tr -d '/')
    export RANDOM_JWT_SECRET=$(openssl rand -base64 64 | tr -d '/')
    export RANDOM_REDIS_PASSWORD=$(openssl rand -base64 32 | tr -d '/')
    
    info "–ü–∞—Ä–æ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
}

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
create_env_file() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
    
    cat > .env.production << EOF
# === PRODUCTION ENVIRONMENT ===
NODE_ENV=production
DOMAIN=$DOMAIN
SERVER_IP=$SERVER_IP

# === DATABASE ===
DB_PASSWORD=$RANDOM_DB_PASSWORD
DATABASE_URL=postgresql://worktime_user:$RANDOM_DB_PASSWORD@db:5432/worktime_tracker_prod

# === AUTHENTICATION ===
JWT_SECRET=$RANDOM_JWT_SECRET

# === REDIS ===
REDIS_PASSWORD=$RANDOM_REDIS_PASSWORD

# === API CONFIGURATION ===
API_RATE_LIMIT=100
AUTH_RATE_LIMIT=5
CORS_ORIGINS=https://$DOMAIN,https://www.$DOMAIN

# === SSL ===
SSL_EMAIL=admin@$DOMAIN

# === MONITORING ===
LOG_LEVEL=info
BACKUP_RETENTION_DAYS=30

# === GENERATED ON ===
GENERATED_AT=$(date)
EOF

    log "‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
}

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
prepare_project() {
    log "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    mkdir -p nginx/{logs,ssl,certbot-webroot}
    mkdir -p server/{logs,uploads,backups}
    mkdir -p redis/data
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    generate_passwords
    create_env_file
    
    log "‚úÖ –ü—Ä–æ–µ–∫—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω"
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
deploy_to_server() {
    log "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä $SERVER_IP..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    exec_remote "mkdir -p $PROJECT_DIR"
    exec_remote "rm -rf $PROJECT_DIR/*"
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    copy_to_server "./" "$PROJECT_DIR/"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∞–≤
    exec_remote "chown -R root:root $PROJECT_DIR"
    exec_remote "chmod +x $PROJECT_DIR/deploy.sh"
    
    log "‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
build_and_start() {
    log "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    exec_remote "cd $PROJECT_DIR && docker-compose -f docker-compose.production.yml down --remove-orphans"
    exec_remote "cd $PROJECT_DIR && docker-compose -f docker-compose.production.yml build --no-cache"
    exec_remote "cd $PROJECT_DIR && docker-compose -f docker-compose.production.yml up -d"
    
    log "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
setup_ssl() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è $DOMAIN..."
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    exec_remote "cd $PROJECT_DIR && docker-compose -f docker-compose.production.yml run --rm certbot"
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx
    exec_remote "cd $PROJECT_DIR && docker-compose -f docker-compose.production.yml restart nginx"
    
    log "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL
setup_ssl_renewal() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    
    exec_remote "echo '0 3 * * * cd $PROJECT_DIR && docker-compose -f docker-compose.production.yml run --rm certbot renew && docker-compose -f docker-compose.production.yml restart nginx' | crontab -"
    
    log "‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ç–∫–∞–ø–æ–≤
setup_backups() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –±—ç–∫–∞–ø–∞
    exec_remote "cat > $PROJECT_DIR/backup.sh << 'EOFBACKUP'
#!/bin/bash
DATE=\$(date +%Y%m%d_%H%M%S)
BACKUP_DIR=\"$PROJECT_DIR/server/backups\"
mkdir -p \$BACKUP_DIR

# –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
docker-compose -f $PROJECT_DIR/docker-compose.production.yml exec -T db pg_dump -U worktime_user worktime_tracker_prod | gzip > \$BACKUP_DIR/db_backup_\$DATE.sql.gz

# –ë—ç–∫–∞–ø —Ñ–∞–π–ª–æ–≤
tar -czf \$BACKUP_DIR/files_backup_\$DATE.tar.gz $PROJECT_DIR/server/uploads

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
find \$BACKUP_DIR -type f -mtime +30 -delete

echo \"Backup completed: \$DATE\"
EOFBACKUP"

    exec_remote "chmod +x $PROJECT_DIR/backup.sh"
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ crontab (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00)
    exec_remote "echo '0 2 * * * $PROJECT_DIR/backup.sh' | crontab -"
    
    log "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
check_status() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    sleep 30  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    exec_remote "cd $PROJECT_DIR && docker-compose -f docker-compose.production.yml ps"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if curl -f -s "http://$DOMAIN/health" > /dev/null; then
        log "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTP"
    else
        warn "‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTP"
    fi
    
    if curl -f -s -k "https://$DOMAIN/health" > /dev/null; then
        log "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTPS"
    else
        warn "‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTPS (–≤–æ–∑–º–æ–∂–Ω–æ, SSL –µ—â–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è)"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
show_summary() {
    log "=== –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ==="
    info "üåê –î–æ–º–µ–Ω: https://$DOMAIN"
    info "üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä: $SERVER_IP"
    info "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $PROJECT_DIR"
    info "üîê –ü–∞—Ä–æ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: .env.production"
    echo ""
    info "üìã –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:"
    info "   –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: ssh $SERVER_USER@$SERVER_IP 'cd $PROJECT_DIR && docker-compose -f docker-compose.production.yml logs -f'"
    info "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: ssh $SERVER_USER@$SERVER_IP 'cd $PROJECT_DIR && docker-compose -f docker-compose.production.yml restart'"
    info "   –°—Ç–∞—Ç—É—Å: ssh $SERVER_USER@$SERVER_IP 'cd $PROJECT_DIR && docker-compose -f docker-compose.production.yml ps'"
    echo ""
    log "üöÄ WorkTimeTracker —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-deploy}" in
        "requirements")
            check_requirements
            ;;
        "prepare")
            prepare_project
            ;;
        "deploy")
            check_requirements
            install_dependencies
            prepare_project
            deploy_to_server
            build_and_start
            setup_ssl
            setup_ssl_renewal
            setup_backups
            check_status
            show_summary
            ;;
        "update")
            deploy_to_server
            build_and_start
            check_status
            ;;
        "ssl")
            setup_ssl
            ;;
        "status")
            check_status
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {deploy|update|ssl|status|requirements|prepare}"
            echo ""
            echo "  deploy      - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  update      - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            echo "  ssl         - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL"
            echo "  status      - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
            echo "  requirements - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"
            echo "  prepare     - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
            exit 1
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è sshpass
if ! command -v sshpass >/dev/null 2>&1; then
    warn "sshpass –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞..."
    if [[ "$OSTYPE" == "darwin"* ]]; then
        brew install hudochenkov/sshpass/sshpass
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        sudo apt-get update && sudo apt-get install -y sshpass || sudo dnf install -y sshpass || sudo yum install -y sshpass
    else
        error "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ sshpass –≤—Ä—É—á–Ω—É—é –¥–ª—è –≤–∞—à–µ–π –û–°"
    fi
fi

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 