# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã console.log –Ω–∞ Winston logger

Write-Host "üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–º–µ–Ω—É console.log –Ω–∞ winston logger..." -ForegroundColor Green

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
function Replace-ConsoleLogs {
    param(
        [string]$FilePath
    )
    
    $content = Get-Content $FilePath -Raw
    $originalContent = $content
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç logger –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if ($content -notmatch 'import.*logger.*from.*utils/logger' -and $content -match 'console\.(log|error|warn|info|debug)') {
        # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
        if ($content -match "import.*from.*config/database") {
            $content = $content -replace "(import.*from.*config/database.*?;)", "`$1`nimport logger from '../utils/logger';"
        } elseif ($content -match "import.*from.*types") {
            $content = $content -replace "(import.*from.*types.*?;)", "`$1`nimport logger from '../utils/logger';"
        } elseif ($content -match "import.*from.*express") {
            $content = $content -replace "(import.*from.*express.*?;)", "`$1`nimport logger from '../utils/logger';"
        }
    }
    
    # –ó–∞–º–µ–Ω—è–µ–º console.error –Ω–∞ logger.error
    $content = $content -replace "console\.error\(\s*'([^']+)'[,\s]*([^)]*)\)", "logger.error('`$1', { error: `$2 })"
    $content = $content -replace "console\.error\(\s*`([^`]+)`[,\s]*([^)]*)\)", "logger.error('`$1', { error: `$2 })"
    $content = $content -replace "console\.error\(\s*([^,\)]+)\)", "logger.error(`$1)"
    
    # –ó–∞–º–µ–Ω—è–µ–º console.log –Ω–∞ logger.info
    $content = $content -replace "console\.log\(\s*'([^']+)'[,\s]*([^)]*)\)", "logger.info('`$1', { data: `$2 })"
    $content = $content -replace "console\.log\(\s*`([^`]+)`[,\s]*([^)]*)\)", "logger.info('`$1', { data: `$2 })"
    $content = $content -replace "console\.log\(\s*([^,\)]+)\)", "logger.info(`$1)"
    
    # –ó–∞–º–µ–Ω—è–µ–º console.warn –Ω–∞ logger.warn
    $content = $content -replace "console\.warn\(\s*'([^']+)'[,\s]*([^)]*)\)", "logger.warn('`$1', { data: `$2 })"
    $content = $content -replace "console\.warn\(\s*`([^`]+)`[,\s]*([^)]*)\)", "logger.warn('`$1', { data: `$2 })"
    $content = $content -replace "console\.warn\(\s*([^,\)]+)\)", "logger.warn(`$1)"
    
    # –ó–∞–º–µ–Ω—è–µ–º console.info –Ω–∞ logger.info
    $content = $content -replace "console\.info\(\s*'([^']+)'[,\s]*([^)]*)\)", "logger.info('`$1', { data: `$2 })"
    $content = $content -replace "console\.info\(\s*`([^`]+)`[,\s]*([^)]*)\)", "logger.info('`$1', { data: `$2 })"
    $content = $content -replace "console\.info\(\s*([^,\)]+)\)", "logger.info(`$1)"
    
    # –ó–∞–º–µ–Ω—è–µ–º console.debug –Ω–∞ logger.debug
    $content = $content -replace "console\.debug\(\s*'([^']+)'[,\s]*([^)]*)\)", "logger.debug('`$1', { data: `$2 })"
    $content = $content -replace "console\.debug\(\s*`([^`]+)`[,\s]*([^)]*)\)", "logger.debug('`$1', { data: `$2 })"
    $content = $content -replace "console\.debug\(\s*([^,\)]+)\)", "logger.debug(`$1)"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if ($content -ne $originalContent) {
        Set-Content $FilePath -Value $content -Encoding UTF8
        Write-Host "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: $FilePath" -ForegroundColor Green
        return $true
    }
    
    return $false
}

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ TypeScript —Ñ–∞–π–ª—ã –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏
$serverFiles = Get-ChildItem -Path "server/src" -Recurse -Filter "*.ts" | Where-Object { $_.Name -ne "logger.ts" }
$updatedCount = 0

foreach ($file in $serverFiles) {
    if (Replace-ConsoleLogs -FilePath $file.FullName) {
        $updatedCount++
    }
}

Write-Host "üéâ –ó–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: $updatedCount" -ForegroundColor Green
Write-Host "üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã logger –≤ —Ñ–∞–π–ª–∞—Ö" -ForegroundColor Yellow 