#!/bin/bash

# Setup PostgreSQL for WorkTime Tracker on macOS
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DB_HOST="localhost"
PORT="5432"
DATABASE="worktime_tracker"
USER="worktime_user"
USE_DOCKER=false
FORCE=false

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        --host)
            DB_HOST="$2"
            shift 2
            ;;
        --port)
            PORT="$2"
            shift 2
            ;;
        --database)
            DATABASE="$2"
            shift 2
            ;;
        --user)
            USER="$2"
            shift 2
            ;;
        --use-docker)
            USE_DOCKER=true
            shift
            ;;
        --force)
            FORCE=true
            shift
            ;;
        --help)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
            echo "–û–ø—Ü–∏–∏:"
            echo "  --host HOST        –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: localhost)"
            echo "  --port PORT        –ü–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5432)"
            echo "  --database DB      –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: worktime_tracker)"
            echo "  --user USER        –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: worktime_user)"
            echo "  --use-docker       –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Docker –¥–ª—è PostgreSQL"
            echo "  --force           –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã/–ë–î"
            echo "  --help            –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            exit 0
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
done

echo "üêò –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –¥–ª—è WorkTime Tracker –Ω–∞ macOS"
echo "======================================================"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL
check_postgresql_installed() {
    if command -v psql &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
check_docker_installed() {
    if command -v docker &> /dev/null && docker --version &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Homebrew
check_homebrew_installed() {
    if command -v brew &> /dev/null; then
        return 0
    else
        return 1
    fi
}

if [ "$USE_DOCKER" = true ]; then
    echo "üê≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Docker –¥–ª—è PostgreSQL..."
    
    if ! check_docker_installed; then
        echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop."
        echo "–°–∫–∞—á–∞—Ç—å: https://www.docker.com/products/docker-desktop/"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    existing_container=$(docker ps -a --filter "name=worktime-postgres" --format "{{.Names}}" 2>/dev/null)
    
    if [ ! -z "$existing_container" ] && [ "$FORCE" = false ]; then
        echo "‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä worktime-postgres —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."
        exit 1
    fi
    
    if [ ! -z "$existing_container" ] && [ "$FORCE" = true ]; then
        echo "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
        docker stop worktime-postgres 2>/dev/null || true
        docker rm worktime-postgres 2>/dev/null || true
    fi
    
    echo "üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL –≤ Docker..."
    docker-compose up -d postgres
    
    sleep 10
    
    echo "‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω –≤ Docker!"
    echo "üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
    echo "   Host: localhost"
    echo "   Port: 5432"
    echo "   Database: worktime_tracker"
    echo "   User: postgres"
    echo "   Password: postgres"
else
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ PostgreSQL..."
    
    if ! check_postgresql_installed; then
        echo "‚ùå PostgreSQL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        
        if check_homebrew_installed; then
            echo "üç∫ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PostgreSQL —á–µ—Ä–µ–∑ Homebrew..."
            brew install postgresql@15
            brew services start postgresql@15
        else
            echo "‚ùå Homebrew –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
            echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Homebrew: /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
            echo "–ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: brew install postgresql@15"
            echo "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --use-docker"
            exit 1
        fi
    fi
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    echo -n "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $USER: "
    read -s PASSWORD
    echo ""
    
    echo "üìã –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    
    # SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_db_sql="
-- –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
DO \$\$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '$USER') THEN
        CREATE ROLE $USER LOGIN PASSWORD '$PASSWORD';
    END IF;
END
\$\$;

-- –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
SELECT 'CREATE DATABASE $DATABASE'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$DATABASE')\\gexec

-- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤
GRANT ALL PRIVILEGES ON DATABASE $DATABASE TO $USER;
GRANT CONNECT ON DATABASE $DATABASE TO $USER;

-- –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–∞—à—É –ë–î –∏ –¥–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å—Ö–µ–º—É
\\c $DATABASE
GRANT ALL ON SCHEMA public TO $USER;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $USER;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO $USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO $USER;
"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∫–æ–º–∞–Ω–¥—ã
    echo "$create_db_sql" | psql -h "$DB_HOST" -p "$PORT" -U postgres -d postgres
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        echo "–í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL"
        exit 1
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
    echo "üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ server/.env..."
    
    env_file="server/.env"
    if [ ! -f "$env_file" ]; then
        if [ -f "server/env.example" ]; then
            cp server/env.example "$env_file"
        else
            touch "$env_file"
        fi
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –≤ .env
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS version of sed
        sed -i '' "s/^DB_HOST=.*/DB_HOST=$DB_HOST/" "$env_file"
        sed -i '' "s/^DB_PORT=.*/DB_PORT=$PORT/" "$env_file"
        sed -i '' "s/^DB_NAME=.*/DB_NAME=$DATABASE/" "$env_file"
        sed -i '' "s/^DB_USER=.*/DB_USER=$USER/" "$env_file"
        sed -i '' "s/^DB_PASSWORD=.*/DB_PASSWORD=$PASSWORD/" "$env_file"
    else
        # Linux version of sed
        sed -i "s/^DB_HOST=.*/DB_HOST=$DB_HOST/" "$env_file"
        sed -i "s/^DB_PORT=.*/DB_PORT=$PORT/" "$env_file"
        sed -i "s/^DB_NAME=.*/DB_NAME=$DATABASE/" "$env_file"
        sed -i "s/^DB_USER=.*/DB_USER=$USER/" "$env_file"
        sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=$PASSWORD/" "$env_file"
    fi
    
    echo "‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–µ—Ä–≤–µ—Ä–∞
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–µ—Ä–≤–µ—Ä–∞..."
if [ ! -d "server/node_modules" ]; then
    echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞..."
    cd server && npm install && cd ..
fi

# –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
echo "üóÑÔ∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
cd server

if [ ! -f "dist/config/database.js" ]; then
    echo "üì¶ –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
    npm run build
fi

npm run migrate

if [ $? -eq 0 ]; then
    echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"
    echo "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é: cd server && npm run migrate"
fi

cd ..

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."

cd server
if [ -f "dist/config/database.js" ]; then
    node -e "
        const { testConnection } = require('./dist/config/database.js');
        testConnection().then(success => {
            if (success) {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');
                process.exit(0);
            } else {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                process.exit(1);
            }
        }).catch(err => {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
            process.exit(1);
        });
    "
    if [ $? -eq 0 ]; then
        echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    fi
else
    echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Å–æ–±—Ä–∞–Ω (npm run build)"
fi
cd ..

echo ""
echo "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "=================================="
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install"
echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run server:dev"
echo "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm start"
echo ""
echo "üí° –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "./quick-start-mac.sh" 