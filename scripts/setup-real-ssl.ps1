# –†–µ–∞–ª—å–Ω—ã–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è WorkTime Tracker
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Let's Encrypt —Å Certbot

param(
    [Parameter(Mandatory=$true)]
    [string]$Domain,
    [string]$Email = "",
    [switch]$Staging = $false,
    [switch]$Production = $false,
    [switch]$UpdateOnly = $false,
    [switch]$InstallCertbot = $false
)

Write-Host "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è WorkTime Tracker" -ForegroundColor Green
Write-Host "–î–æ–º–µ–Ω: $Domain" -ForegroundColor Cyan
Write-Host "–†–µ–∂–∏–º: $(if ($Staging) { 'Staging' } elseif ($Production) { 'Production' } else { 'Test' })" -ForegroundColor Cyan

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
if ($Domain -eq "localhost" -or $Domain -like "*.local") {
    Write-Host "‚ùå –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω—É–∂–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ–º–µ–Ω!" -ForegroundColor Red
    Write-Host "–ü—Ä–∏–º–µ—Ä: yourdomain.com –∏–ª–∏ app.yourdomain.com" -ForegroundColor Yellow
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ email –¥–ª—è Let's Encrypt
if (-not $Email) {
    $Email = Read-Host "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è Let's Encrypt —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    if (-not $Email) {
        Write-Host "‚ùå Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è Let's Encrypt" -ForegroundColor Red
        exit 1
    }
}

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
$nginxDir = "nginx"
$sslDir = "$nginxDir/ssl"
$certbotDir = "certbot"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
New-Item -ItemType Directory -Force -Path $sslDir | Out-Null
New-Item -ItemType Directory -Force -Path $certbotDir | Out-Null
New-Item -ItemType Directory -Force -Path "$certbotDir/conf" | Out-Null
New-Item -ItemType Directory -Force -Path "$certbotDir/www" | Out-Null

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Certbot —á–µ—Ä–µ–∑ Docker
function Install-CertbotDocker {
    Write-Host "üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Certbot —á–µ—Ä–µ–∑ Docker..." -ForegroundColor Yellow
    
    # –°–æ–∑–¥–∞–Ω–∏–µ docker-compose —Ñ–∞–π–ª–∞ –¥–ª—è Certbot
    $certbotCompose = @"
version: '3.8'

services:
  certbot:
    image: certbot/certbot:latest
    container_name: worktime-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
      - ./certbot/logs:/var/log/letsencrypt:rw
    command: certonly --webroot --webroot-path=/var/www/certbot --email $Email --agree-tos --no-eff-email $(if ($Staging) { '--staging' } else { '' }) -d $Domain
    
  nginx-certbot:
    image: nginx:alpine
    container_name: worktime-nginx-certbot
    ports:
      - "80:80"
    volumes:
      - ./certbot/www:/var/www/certbot:ro
      - ./nginx/nginx-certbot.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
"@

    $certbotCompose | Out-File -FilePath "docker-compose.certbot.yml" -Encoding UTF8
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è ACME challenge
    $nginxCertbotConfig = @"
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    server {
        listen 80;
        server_name $Domain;
        
        # ACME challenge –¥–ª—è Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # –†–µ–¥–∏—Ä–µ–∫—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ HTTPS (–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞)
        location / {
            return 301 https://`$server_name`$request_uri;
        }
    }
}
"@

    $nginxCertbotConfig | Out-File -FilePath "$nginxDir/nginx-certbot.conf" -Encoding UTF8
    
    Write-Host "‚úÖ Certbot Docker –Ω–∞—Å—Ç—Ä–æ–µ–Ω" -ForegroundColor Green
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
function Get-LetsEncryptCertificate {
    Write-Host "üåê –ü–æ–ª—É—á–µ–Ω–∏–µ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..." -ForegroundColor Yellow
    
    # –ó–∞–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ nginx –¥–ª—è ACME challenge
    Write-Host "üîÑ –ó–∞–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ nginx –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–∞..." -ForegroundColor Cyan
    docker-compose -f docker-compose.certbot.yml up -d nginx-certbot
    
    Start-Sleep -Seconds 5
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    Write-Host "üìú –ó–∞–ø—É—Å–∫ Certbot –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..." -ForegroundColor Cyan
    $certbotCommand = "certonly --webroot --webroot-path=/var/www/certbot --email $Email --agree-tos --no-eff-email"
    
    if ($Staging) {
        $certbotCommand += " --staging"
    }
    
    $certbotCommand += " -d $Domain"
    
    docker run --rm -v "${PWD}/certbot/conf:/etc/letsencrypt" -v "${PWD}/certbot/www:/var/www/certbot" -v "${PWD}/certbot/logs:/var/log/letsencrypt" certbot/certbot $certbotCommand
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!" -ForegroundColor Green
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ nginx/ssl
        $certPath = "certbot/conf/live/$Domain"
        if (Test-Path $certPath) {
            Copy-Item "$certPath/fullchain.pem" "$sslDir/cert.pem" -Force
            Copy-Item "$certPath/privkey.pem" "$sslDir/key.pem" -Force
            Write-Host "üìã –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ $sslDir" -ForegroundColor Green
        }
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ nginx
        docker-compose -f docker-compose.certbot.yml down
        
        return $true
    } else {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞" -ForegroundColor Red
        docker-compose -f docker-compose.certbot.yml logs certbot
        docker-compose -f docker-compose.certbot.yml down
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è DH –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
function New-DHParams {
    if (-not (Test-Path "$sslDir/dhparam.pem")) {
        Write-Host "üîê –°–æ–∑–¥–∞–Ω–∏–µ DH –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)..." -ForegroundColor Yellow
        docker run --rm -v "${PWD}/${sslDir}:/ssl" alpine/openssl dhparam -out /ssl/dhparam.pem 2048
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ DH –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω—ã" -ForegroundColor Green
        } else {
            Write-Host "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DH –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤" -ForegroundColor Red
        }
    } else {
        Write-Host "‚úÖ DH –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç" -ForegroundColor Green
    }
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è SSL
function Update-NginxSSLConfig {
    Write-Host "‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è SSL..." -ForegroundColor Yellow
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    $nginxConfig = Get-Content "$nginxDir/nginx.conf" -Raw
    $nginxConfig = $nginxConfig -replace "server_name localhost;", "server_name $Domain;"
    $nginxConfig = $nginxConfig -replace "server_name _;", "server_name $Domain;"
    $nginxConfig | Out-File -FilePath "$nginxDir/nginx.conf" -Encoding UTF8
    
    Write-Host "‚úÖ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞: $Domain" -ForegroundColor Green
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ docker-compose
function Update-DockerComposeSSL {
    Write-Host "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ docker-compose –¥–ª—è SSL..." -ForegroundColor Yellow
    
    $dockerSSLOverride = @"
version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: worktime-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl.conf:/etc/nginx/conf.d/ssl.conf:ro
      - ./src:/usr/share/nginx/html:ro
      - ./certbot/www:/var/www/certbot:ro
    networks:
      - worktime-network
    restart: unless-stopped
    depends_on:
      - server

  # –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  certbot-renew:
    image: certbot/certbot:latest
    container_name: worktime-certbot-renew
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
      - ./certbot/logs:/var/log/letsencrypt:rw
    command: sh -c "trap exit TERM; while :; do certbot renew --webroot --webroot-path=/var/www/certbot; sleep 12h & wait \$$!; done;"
    restart: unless-stopped

networks:
  worktime-network:
    driver: bridge
"@

    $dockerSSLOverride | Out-File -FilePath "docker-compose.ssl-real.yml" -Encoding UTF8
    Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω docker-compose.ssl-real.yml" -ForegroundColor Green
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
function New-RenewalScript {
    $renewalScript = @"
# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
# –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á

Write-Host "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..." -ForegroundColor Yellow

# –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
docker-compose -f docker-compose.ssl-real.yml exec certbot-renew certbot renew --webroot --webroot-path=/var/www/certbot

if (`$LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã" -ForegroundColor Green
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    `$certPath = "certbot/conf/live/$Domain"
    if (Test-Path `$certPath) {
        Copy-Item "`$certPath/fullchain.pem" "nginx/ssl/cert.pem" -Force
        Copy-Item "`$certPath/privkey.pem" "nginx/ssl/key.pem" -Force
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ nginx
        docker-compose -f docker-compose.ssl-real.yml restart nginx
        Write-Host "üîÑ Nginx –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏" -ForegroundColor Green
    fi
} else {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤" -ForegroundColor Red
}
"@

    $renewalScript | Out-File -FilePath "scripts/renew-ssl.ps1" -Encoding UTF8
    Write-Host "‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è scripts/renew-ssl.ps1" -ForegroundColor Green
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
try {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
        Write-Host "‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop" -ForegroundColor Red
        exit 1
    }

    if ($UpdateOnly) {
        Write-Host "üîÑ –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..." -ForegroundColor Cyan
        
        if (Test-Path "certbot/conf/live/$Domain") {
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            docker run --rm -v "${PWD}/certbot/conf:/etc/letsencrypt" -v "${PWD}/certbot/www:/var/www/certbot" certbot/certbot renew --webroot --webroot-path=/var/www/certbot
            
            if ($LASTEXITCODE -eq 0) {
                # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
                Copy-Item "certbot/conf/live/$Domain/fullchain.pem" "$sslDir/cert.pem" -Force
                Copy-Item "certbot/conf/live/$Domain/privkey.pem" "$sslDir/key.pem" -Force
                Write-Host "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã" -ForegroundColor Green
            }
        } else {
            Write-Host "‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –¥–æ–º–µ–Ω–∞ $Domain –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" -ForegroundColor Red
        }
    } else {
        # –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SSL
        Install-CertbotDocker
        
        if (Get-LetsEncryptCertificate) {
            New-DHParams
            Update-NginxSSLConfig
            Update-DockerComposeSSL
            New-RenewalScript
            
            Write-Host "`nüéâ –†–µ–∞–ª—å–Ω—ã–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!" -ForegroundColor Green
            Write-Host "`nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Cyan
            Write-Host "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å SSL:" -ForegroundColor White
            Write-Host "   docker-compose -f docker-compose.yml -f docker-compose.ssl-real.yml up -d" -ForegroundColor Gray
            Write-Host "`n2. –û—Ç–∫—Ä–æ–π—Ç–µ https://$Domain –≤ –±—Ä–∞—É–∑–µ—Ä–µ" -ForegroundColor White
            Write-Host "`n3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:" -ForegroundColor White
            Write-Host "   –î–æ–±–∞–≤—å—Ç–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á Windows –∑–∞–ø—É—Å–∫ scripts/renew-ssl.ps1" -ForegroundColor Gray
            
            if ($Staging) {
                Write-Host "`n‚ö†Ô∏è –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ staging —Ä–µ–∂–∏–º. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∑–∞–ø—É—Å—Ç–∏—Ç–µ:" -ForegroundColor Yellow
                Write-Host ".\scripts\setup-real-ssl.ps1 -Domain $Domain -Email $Email -Production" -ForegroundColor Gray
            }
        }
    }
    
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
} 