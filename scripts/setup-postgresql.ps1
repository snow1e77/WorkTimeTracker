#!/usr/bin/env pwsh

# Setup PostgreSQL for WorkTime Tracker
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞

param(
    [string]$DbHost = "localhost",
    [string]$Port = "5432",
    [string]$Database = "worktime_tracker",
    [string]$User = "worktime_user",
    [SecureString]$Password,
    [switch]$UseDocker = $false,
    [switch]$Force = $false
)

Write-Host "üêò –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –¥–ª—è WorkTime Tracker" -ForegroundColor Green
Write-Host "=======================================" -ForegroundColor Green

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL
function Test-PostgreSQLInstalled {
    try {
        Get-Command psql -ErrorAction Stop | Out-Null
        return $true
    }
    catch {
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
function Test-DockerInstalled {
    try {
        Get-Command docker -ErrorAction Stop | Out-Null
        docker --version | Out-Null
        return $true
    }
    catch {
        return $false
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if ($UseDocker) {
    Write-Host "üê≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Docker –¥–ª—è PostgreSQL..." -ForegroundColor Blue
    
    if (-not (Test-DockerInstalled)) {
        Write-Host "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop." -ForegroundColor Red
        exit 1
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    $existingContainer = docker ps -a --filter "name=worktime-postgres" --format "{{.Names}}"
    
    if ($existingContainer -and -not $Force) {
        Write-Host "‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä worktime-postgres —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç." -ForegroundColor Yellow
        Write-Host "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞." -ForegroundColor Yellow
        exit 1
    }
    
    if ($existingContainer -and $Force) {
        Write-Host "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..." -ForegroundColor Yellow
        docker stop worktime-postgres 2>$null
        docker rm worktime-postgres 2>$null
    }
    
    Write-Host "üöÄ –ó–∞–ø—É—Å–∫ PostgreSQL –≤ Docker..." -ForegroundColor Blue
    docker-compose up -d postgres
    
    Start-Sleep -Seconds 10
    
    Write-Host "‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω –≤ Docker!" -ForegroundColor Green
    Write-Host "üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:" -ForegroundColor Cyan
    Write-Host "   Host: localhost" -ForegroundColor White
    Write-Host "   Port: 5432" -ForegroundColor White
    Write-Host "   Database: worktime_tracker" -ForegroundColor White
    Write-Host "   User: postgres" -ForegroundColor White
    Write-Host "   Password: postgres" -ForegroundColor White
}
else {
    Write-Host "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ PostgreSQL..." -ForegroundColor Blue
    
    if (-not (Test-PostgreSQLInstalled)) {
        Write-Host "‚ùå PostgreSQL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!" -ForegroundColor Red
        Write-Host "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL 15+ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ -UseDocker" -ForegroundColor Yellow
        exit 1
    }
    
    if (-not $Password) {
        $Password = Read-Host "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $User" -AsSecureString
    }
    
    $PlainPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($Password))
    
    Write-Host "üìã –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..." -ForegroundColor Blue
    
    # SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    $createDbSql = @"
-- –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
DO `$`$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '$User') THEN
        CREATE ROLE $User LOGIN PASSWORD '$PlainPassword';
    END IF;
END
`$`$;

-- –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
SELECT 'CREATE DATABASE $Database'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$Database')\gexec

-- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤
GRANT ALL PRIVILEGES ON DATABASE $Database TO $User;
GRANT CONNECT ON DATABASE $Database TO $User;
"@
    
    try {
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ postgres DB –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ë–î
        $createDbSql | psql -h $DbHost -p $Port -U postgres -d postgres
        
        Write-Host "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞!" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $($_.Exception.Message)" -ForegroundColor Red
        exit 1
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
Write-Host "üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..." -ForegroundColor Blue

$envContent = @"
# Database Configuration
DB_HOST=$DbHost
DB_PORT=$Port
DB_NAME=$Database
DB_USER=$(if ($UseDocker) { 'postgres' } else { $User })
DB_PASSWORD=$(if ($UseDocker) { 'postgres' } else { $PlainPassword })

# JWT Configuration
JWT_SECRET=your-development-jwt-secret-key-change-in-production
JWT_EXPIRES_IN=7d
JWT_REFRESH_EXPIRES_IN=30d

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# App Store Links (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
APP_STORE_URL=https://apps.apple.com/your-app
PLAY_STORE_URL=https://play.google.com/store/apps/your-app

# CORS Origins
CORS_ORIGINS=http://localhost:19006,http://localhost:3000

# Server Configuration
PORT=3001
NODE_ENV=development

# Logging
LOG_LEVEL=info
LOG_FILE=logs/app.log
"@

$envPath = "server/.env"

if (Test-Path $envPath -and -not $Force) {
    Write-Host "‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏." -ForegroundColor Yellow
} else {
    $envContent | Out-File -FilePath $envPath -Encoding UTF8
    Write-Host "‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –≤ server/.env" -ForegroundColor Green
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
Write-Host "üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Blue

try {
    Set-Location server
    npm run migrate
    Write-Host "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é: cd server && npm run migrate" -ForegroundColor Yellow
}
finally {
    Set-Location ..
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Blue

try {
    Set-Location server
    node -e "
        const { testConnection } = require('./dist/config/database.js');
        testConnection().then(success => {
            if (success) {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');
                process.exit(0);
            } else {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                process.exit(1);
            }
        }).catch(err => {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
            process.exit(1);
        });
    "
    Write-Host "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!" -ForegroundColor Green
}
catch {
    Write-Host "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Å–æ–±—Ä–∞–Ω (npm run build)" -ForegroundColor Yellow
}
finally {
    Set-Location ..
}

Write-Host ""
Write-Host "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -ForegroundColor Green
Write-Host "==============================" -ForegroundColor Green
Write-Host ""
Write-Host "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Cyan
Write-Host "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install" -ForegroundColor White
Write-Host "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞: cd server && npm install" -ForegroundColor White
Write-Host "3. –°–æ–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: cd server && npm run build" -ForegroundColor White
Write-Host "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: cd server && npm run dev" -ForegroundColor White
Write-Host "5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm start" -ForegroundColor White
Write-Host ""

if ($UseDocker) {
    Write-Host "üê≥ Docker Services:" -ForegroundColor Cyan
    Write-Host "   PostgreSQL: http://localhost:5432" -ForegroundColor White
    Write-Host "   PgAdmin: http://localhost:5050 (admin@worktime.com / admin)" -ForegroundColor White
}

Write-Host "üìñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -ForegroundColor Cyan
Write-Host "   –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: cd server && npm run seed" -ForegroundColor White
Write-Host "   –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é: npm run web" -ForegroundColor White
Write-Host "   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker: docker-compose down" -ForegroundColor White 