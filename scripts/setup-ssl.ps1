# SSL Configuration Script for WorkTime Tracker
# –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤

param(
    [string]$Domain = "localhost",
    [switch]$Production = $false,
    [switch]$SelfSigned = $false,
    [switch]$LetsEncrypt = $false
)

Write-Host "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è WorkTime Tracker" -ForegroundColor Green
Write-Host "–î–æ–º–µ–Ω: $Domain" -ForegroundColor Cyan

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
$sslDir = "nginx/ssl"
$nginxDir = "nginx"

New-Item -ItemType Directory -Force -Path $sslDir | Out-Null
New-Item -ItemType Directory -Force -Path "$nginxDir/conf.d" | Out-Null

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenSSL
function Test-OpenSSL {
    try {
        $null = Get-Command openssl -ErrorAction Stop
        return $true
    }
    catch {
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
function New-SelfSignedCertificate {
    param([string]$Domain)
    
    Write-Host "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..." -ForegroundColor Yellow
    
    if (-not (Test-OpenSSL)) {
        Write-Host "‚ùå OpenSSL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..." -ForegroundColor Red
        
        # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ OpenSSL —á–µ—Ä–µ–∑ Chocolatey
        if (Get-Command choco -ErrorAction SilentlyContinue) {
            Write-Host "Installing OpenSSL via Chocolatey..." -ForegroundColor Yellow
            choco install openssl -y
        } else {
            Write-Host "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ OpenSSL –∏–ª–∏ Chocolatey" -ForegroundColor Red
            Write-Host "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenSSL –≤—Ä—É—á–Ω—É—é:" -ForegroundColor Yellow
            Write-Host "1. –°–∫–∞—á–∞–π—Ç–µ —Å https://slproweb.com/products/Win32OpenSSL.html" -ForegroundColor White
            Write-Host "2. –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Chocolatey: choco install openssl" -ForegroundColor White
            return $false
        }
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    $keyPath = "$sslDir/key.pem"
    $certPath = "$sslDir/cert.pem"
    $csrPath = "$sslDir/cert.csr"
    $configPath = "$sslDir/openssl.conf"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ OpenSSL
    $opensslConfig = @"
[req]
default_bits = 4096
prompt = no
default_md = sha256
distinguished_name = dn
req_extensions = v3_req

[dn]
C=RU
ST=Moscow
L=Moscow
O=WorkTimeTracker
OU=IT Department
CN=$Domain

[v3_req]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = $Domain
DNS.2 = www.$Domain
DNS.3 = localhost
DNS.4 = 127.0.0.1
IP.1 = 127.0.0.1
IP.2 = ::1
"@
    
    $opensslConfig | Out-File -FilePath $configPath -Encoding UTF8
    
    try {
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        & openssl req -new -x509 -nodes -days 365 -keyout $keyPath -out $certPath -config $configPath
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ –°–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω" -ForegroundColor Green
            Write-Host "   –ö–ª—é—á: $keyPath" -ForegroundColor Cyan
            Write-Host "   –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: $certPath" -ForegroundColor Cyan
            
            # –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
            Write-Host "`nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ:" -ForegroundColor Cyan
            & openssl x509 -in $certPath -text -noout | Select-String "Subject:|Issuer:|Not Before:|Not After:|DNS:|IP Address:"
            
            return $true
        } else {
            Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
function New-LetsEncryptCertificate {
    param([string]$Domain)
    
    Write-Host "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..." -ForegroundColor Yellow
    Write-Host "‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –ø—É–±–ª–∏—á–Ω—ã–º IP" -ForegroundColor Yellow
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    Write-Host "üìù –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Let's Encrypt..." -ForegroundColor Cyan
    New-SelfSignedCertificate -Domain $Domain
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Let's Encrypt
    $letsEncryptInstructions = @"
Let's Encrypt Setup Instructions:

1. Install Certbot:
   Ubuntu/Debian: sudo apt install certbot python3-certbot-nginx
   CentOS/RHEL: sudo yum install certbot python3-certbot-nginx

2. Get certificate:
   sudo certbot --nginx -d $Domain -d www.$Domain

3. Setup auto-renewal:
   sudo crontab -e
   Add line: 0 12 * * * /usr/bin/certbot renew --quiet

4. Update Docker Compose:
   Add volume for Let's Encrypt certificates:
   - /etc/letsencrypt:/etc/letsencrypt:ro

5. Change paths in nginx.conf:
   ssl_certificate /etc/letsencrypt/live/$Domain/fullchain.pem;
   ssl_certificate_key /etc/letsencrypt/live/$Domain/privkey.pem;
"@
    
    Write-Host $letsEncryptInstructions -ForegroundColor Cyan
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ —Ñ–∞–π–ª
    $letsEncryptInstructions | Out-File -FilePath "nginx/ssl/lets-encrypt-instructions.txt" -Encoding UTF8
    
    return $true
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function Update-NginxConfig {
    param([string]$Domain)
    
    Write-Host "‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx..." -ForegroundColor Yellow
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ nginx.conf
    $nginxConfig = Get-Content "nginx/nginx.conf" -Raw
    $nginxConfig = $nginxConfig -replace "your-domain\.com", $Domain
    $nginxConfig | Out-File -FilePath "nginx/nginx.conf" -Encoding UTF8
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ nginx.prod.conf
    if (Test-Path "nginx/nginx.prod.conf") {
        $nginxProdConfig = Get-Content "nginx/nginx.prod.conf" -Raw
        $nginxProdConfig = $nginxProdConfig -replace "yourdomain\.com", $Domain
        $nginxProdConfig | Out-File -FilePath "nginx/nginx.prod.conf" -Encoding UTF8
    }
    
    Write-Host "‚úÖ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞: $Domain" -ForegroundColor Green
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Docker Compose override
function New-SSLDockerOverride {
    $dockerOverride = @"
version: '3.8'

services:
  nginx:
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      - DOMAIN=$Domain
"@
    
    $dockerOverride | Out-File -FilePath "docker-compose.ssl.yml" -Encoding UTF8
    Write-Host "üì¶ –°–æ–∑–¥–∞–Ω docker-compose.ssl.yml override —Ñ–∞–π–ª" -ForegroundColor Green
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function Test-SSLConfig {
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." -ForegroundColor Yellow
    
    $keyPath = "$sslDir/key.pem"
    $certPath = "$sslDir/cert.pem"
    
    if (Test-Path $keyPath -and Test-Path $certPath) {
        Write-Host "‚úÖ SSL —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã" -ForegroundColor Green
        
        if (Test-OpenSSL) {
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            try {
                $keyCheck = & openssl rsa -in $keyPath -check -noout 2>&1
                $certCheck = & openssl x509 -in $certPath -text -noout 2>&1
                
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "‚úÖ SSL –∫–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–∞–ª–∏–¥–Ω—ã" -ForegroundColor Green
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                    $keyMd5 = & openssl rsa -noout -modulus -in $keyPath | openssl md5
                    $certMd5 = & openssl x509 -noout -modulus -in $certPath | openssl md5
                    
                    if ($keyMd5 -eq $certMd5) {
                        Write-Host "‚úÖ –ö–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É" -ForegroundColor Green
                    } else {
                        Write-Host "‚ùå –ö–ª—é—á –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç" -ForegroundColor Red
                    }
                } else {
                    Write-Host "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SSL —Ñ–∞–π–ª–æ–≤" -ForegroundColor Red
                }
            }
            catch {
                Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SSL: $($_.Exception.Message)" -ForegroundColor Red
            }
        }
    } else {
        Write-Host "‚ùå SSL —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" -ForegroundColor Red
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
Write-Host "`nüîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:" -ForegroundColor Cyan

if ($LetsEncrypt) {
    $success = New-LetsEncryptCertificate -Domain $Domain
} elseif ($SelfSigned -or -not $Production) {
    $success = New-SelfSignedCertificate -Domain $Domain
} else {
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä
    Write-Host "1. –°–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)" -ForegroundColor White
    Write-Host "2. Let's Encrypt (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω)" -ForegroundColor White
    
    $choice = Read-Host "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-2)"
    
    switch ($choice) {
        "1" { $success = New-SelfSignedCertificate -Domain $Domain }
        "2" { $success = New-LetsEncryptCertificate -Domain $Domain }
        default { 
            Write-Host "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" -ForegroundColor Red
            exit 1
        }
    }
}

if ($success) {
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    Update-NginxConfig -Domain $Domain
    New-SSLDockerOverride
    Test-SSLConfig
    
    Write-Host "`n‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!" -ForegroundColor Green
    Write-Host "`nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Cyan
    Write-Host "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: docker-compose -f docker-compose.yml -f docker-compose.ssl.yml up -d" -ForegroundColor White
    Write-Host "2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: https://$Domain" -ForegroundColor White
    Write-Host "3. –î–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" -ForegroundColor White
    
    if ($Domain -eq "localhost") {
        Write-Host "`nüí° –°–æ–≤–µ—Ç: –î–æ–±–∞–≤—å—Ç–µ –¥–æ–º–µ–Ω –≤ hosts —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:" -ForegroundColor Yellow
        Write-Host "   C:\Windows\System32\drivers\etc\hosts" -ForegroundColor White
        Write-Host "   127.0.0.1 $Domain" -ForegroundColor White
    }
} else {
    Write-Host "`n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã" -ForegroundColor Red
    exit 1
} 