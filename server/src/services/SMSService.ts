import twilio from 'twilio';

export interface SMSResult {
  success: boolean;
  messageId?: string;
  error?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ Twilio API
interface TwilioResponse {
  sid?: string;
  code?: number;
  message?: string;
  more_info?: string;
}

export class SMSService {
  private static twilioClient: twilio.Twilio | null = null;
  private static isInitialized = false;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Twilio –∫–ª–∏–µ–Ω—Ç–∞
  static initialize(): void {
    const accountSid = process.env.TWILIO_ACCOUNT_SID;
    const authToken = process.env.TWILIO_AUTH_TOKEN;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ credentials –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–Ω–µ placeholder –∑–Ω–∞—á–µ–Ω–∏—è)
    if (accountSid && 
        authToken && 
        accountSid !== 'your_twilio_account_sid' && 
        accountSid.startsWith('AC') &&
        authToken !== 'your_twilio_auth_token') {
      try {
        this.twilioClient = twilio(accountSid, authToken);
        this.isInitialized = true;
        console.log('‚úÖ SMS Service initialized with Twilio');
      } catch (error) {
        console.error('‚ùå Failed to initialize Twilio client:', error);
        console.log('‚ö†Ô∏è SMS Service running in demo mode (Twilio initialization failed)');
        this.isInitialized = false;
      }
    } else {
      console.log('‚ö†Ô∏è SMS Service running in demo mode (no valid Twilio credentials)');
      if (accountSid && !accountSid.startsWith('AC')) {
        console.log('   - Twilio Account SID must start with "AC"');
      }
      this.isInitialized = false;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å–æ–æ–±—â–µ–Ω–∏—è
  static async sendSMS(
    phoneNumber: string, 
    message: string
  ): Promise<{ success: boolean; messageId?: string; error?: string }> {
    try {
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (process.env.NODE_ENV !== 'production' || !this.isInitialized || !this.twilioClient) {
        console.log(`üì± SMS to ${phoneNumber}: ${message}`);
        return { 
          success: true, 
          messageId: `demo_${Date.now()}` 
        };
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const formattedPhone = this.formatPhoneNumber(phoneNumber);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —á–µ—Ä–µ–∑ Twilio
      const result = await this.twilioClient.messages.create({
        body: message,
        from: process.env.TWILIO_PHONE_NUMBER,
        to: formattedPhone
      });

      console.log(`‚úÖ SMS sent to ${phoneNumber}, SID: ${result.sid}`);
      return { 
        success: true, 
        messageId: result.sid 
      };

    } catch (error) {
      console.error('‚ùå SMS sending error:', error);
      
      let errorMessage = 'Failed to send SMS';
      if (error instanceof Error) {
        errorMessage = error.message;
      }

      return { 
        success: false, 
        error: errorMessage 
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  static async sendVerificationCode(
    phoneNumber: string, 
    code: string,
    type: 'login' | 'registration' | 'password_reset' = 'login'
  ): Promise<{ success: boolean; messageId?: string; error?: string }> {
    let message = '';
    
    switch (type) {
      case 'login':
        message = `–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ WorkTime Tracker: ${code}`;
        break;
      case 'registration':
        message = `–í–∞—à –∫–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ WorkTime Tracker: ${code}`;
        break;
      case 'password_reset':
        message = `–í–∞—à –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è WorkTime Tracker: ${code}`;
        break;
    }

    return this.sendSMS(phoneNumber, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫—É
  static async sendWorkerNotification(
    phoneNumber: string,
    title: string,
    message: string
  ): Promise<{ success: boolean; messageId?: string; error?: string }> {
    const fullMessage = `WorkTime Tracker - ${title}: ${message}`;
    return this.sendSMS(phoneNumber, fullMessage);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  static async sendViolationAlert(
    phoneNumber: string,
    workerName: string,
    violationType: string,
    siteName: string
  ): Promise<{ success: boolean; messageId?: string; error?: string }> {
    const message = `–ù–∞—Ä—É—à–µ–Ω–∏–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ "${siteName}": —Ä–∞–±–æ—Ç–Ω–∏–∫ ${workerName} - ${violationType}`;
    return this.sendSMS(phoneNumber, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–º–µ–Ω–µ
  static async sendShiftReminder(
    phoneNumber: string,
    siteName: string,
    shiftTime: string
  ): Promise<{ success: boolean; messageId?: string; error?: string }> {
    const message = `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à–∞ —Å–º–µ–Ω–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ "${siteName}" –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ ${shiftTime}`;
    return this.sendSMS(phoneNumber, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
  static async sendAssignmentNotification(
    phoneNumber: string,
    siteName: string,
    startDate?: Date
  ): Promise<{ success: boolean; messageId?: string; error?: string }> {
    let message = `–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –æ–±—ä–µ–∫—Ç "${siteName}"`;
    
    if (startDate) {
      const dateStr = startDate.toLocaleDateString('ru-RU');
      message += ` —Å ${dateStr}`;
    }

    return this.sendSMS(phoneNumber, message);
  }

  // –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS
  static async sendBulkSMS(
    phoneNumbers: string[],
    message: string
  ): Promise<{
    success: boolean;
    sent: number;
    failed: number;
    results: Array<{ phoneNumber: string; success: boolean; messageId?: string; error?: string }>;
  }> {
    const results: Array<{ phoneNumber: string; success: boolean; messageId?: string; error?: string }> = [];
    let sent = 0;
    let failed = 0;

    for (const phoneNumber of phoneNumbers) {
      const result = await this.sendSMS(phoneNumber, message);
      
      results.push({
        phoneNumber,
        success: result.success,
        messageId: result.messageId,
        error: result.error
      });

      if (result.success) {
        sent++;
      } else {
        failed++;
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
      if (this.isInitialized && phoneNumbers.length > 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    return {
      success: sent > 0,
      sent,
      failed,
      results
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è Twilio)
  static async checkMessageStatus(messageId: string): Promise<{
    status?: string;
    error?: string;
  }> {
    if (!this.isInitialized || !this.twilioClient) {
      return { status: 'delivered' }; // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º
    }

    try {
      const message = await this.twilioClient.messages(messageId).fetch();
      return { status: message.status };
    } catch (error) {
      console.error('Error checking message status:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SMS –∑–∞ –ø–µ—Ä–∏–æ–¥
  static async getSMSStatistics(options: {
    startDate?: Date;
    endDate?: Date;
  } = {}): Promise<{
    totalSent: number;
    delivered: number;
    failed: number;
    undelivered: number;
  }> {
    if (!this.isInitialized || !this.twilioClient) {
      // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      return {
        totalSent: 100,
        delivered: 95,
        failed: 3,
        undelivered: 2
      };
    }

    try {
      const { startDate, endDate } = options;
      
      const messagesParams: any = {};
      if (startDate) messagesParams.dateSentAfter = startDate;
      if (endDate) messagesParams.dateSentBefore = endDate;

      const messages = await this.twilioClient.messages.list(messagesParams);
      
      let totalSent = 0;
      let delivered = 0;
      let failed = 0;
      let undelivered = 0;

      messages.forEach(message => {
        totalSent++;
        switch (message.status) {
          case 'delivered':
            delivered++;
            break;
          case 'failed':
          case 'undelivered':
            failed++;
            break;
          default:
            undelivered++;
        }
      });

      return { totalSent, delivered, failed, undelivered };

    } catch (error) {
      console.error('Error getting SMS statistics:', error);
      return { totalSent: 0, delivered: 0, failed: 0, undelivered: 0 };
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  static validatePhoneNumber(phoneNumber: string): boolean {
    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRegex = /^\+?[1-9]\d{1,14}$/;
    return phoneRegex.test(phoneNumber.replace(/[\s\-\(\)]/g, ''));
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Twilio
  private static formatPhoneNumber(phoneNumber: string): string {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
    let cleaned = phoneNumber.replace(/[^\d+]/g, '');
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7 (–¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤)
    if (cleaned.startsWith('8')) {
      cleaned = '+7' + cleaned.substring(1);
    }
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +, –¥–æ–±–∞–≤–ª—è–µ–º +7
    if (!cleaned.startsWith('+')) {
      cleaned = '+7' + cleaned;
    }

    return cleaned;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
  static getServiceInfo(): {
    isInitialized: boolean;
    mode: 'production' | 'demo';
    provider: string;
  } {
    return {
      isInitialized: this.isInitialized,
      mode: this.isInitialized ? 'production' : 'demo',
      provider: 'Twilio'
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ SMS
  static getStatus(): {
    isOnline: boolean;
    mode: 'production' | 'demo';
    provider: string;
    configured: boolean;
    lastError?: string;
  } {
    return {
      isOnline: this.isInitialized,
      mode: this.isInitialized ? 'production' : 'demo',
      provider: 'Twilio',
      configured: this.isInitialized
    };
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
SMSService.initialize(); 