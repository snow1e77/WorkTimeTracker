import { Server as SocketIOServer, Socket } from 'socket.io';
import { Server as HTTPServer } from 'http';
import jwt from 'jsonwebtoken';
import { User } from '../types';

interface AuthenticatedSocket extends Socket {
  user?: User;
}

export class WebSocketService {
  private io: SocketIOServer;
  private connectedUsers = new Map<string, AuthenticatedSocket>();

  constructor(httpServer: HTTPServer) {
    this.io = new SocketIOServer(httpServer, {
      cors: {
        origin: process.env.CORS_ORIGINS?.split(',') || [
          'http://localhost:19006',
          'http://localhost:3000',
          'http://localhost:8081'
        ],
        credentials: true
      }
    });

    this.setupMiddleware();
    this.setupEventHandlers();
  }

  private setupMiddleware(): void {
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ WebSocket
    this.io.use(async (socket: AuthenticatedSocket, next) => {
      try {
        const token = socket.handshake.auth.token || socket.handshake.headers.authorization?.replace('Bearer ', '');
        
        if (!token) {
          return next(new Error('No token provided'));
        }

        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key') as any;
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        socket.user = {
          id: decoded.id,
          phoneNumber: decoded.phoneNumber,
          name: decoded.name,
          role: decoded.role,
          isActive: true,
          isVerified: true,
          createdAt: new Date(),
          updatedAt: new Date()
        };

        next();
      } catch (error) {
        console.error('WebSocket authentication error:', error);
        next(new Error('Authentication failed'));
      }
    });
  }

  private setupEventHandlers(): void {
    this.io.on('connection', (socket: AuthenticatedSocket) => {
      console.log(`üì± User ${socket.user?.name} (${socket.user?.id}) connected via WebSocket`);
      
      if (socket.user) {
        this.connectedUsers.set(socket.user.id, socket);
      }

      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (socket.user) {
        socket.join(`user_${socket.user.id}`);
        
        // –ï—Å–ª–∏ –∞–¥–º–∏–Ω, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∞–¥–º–∏–Ω –∫–æ–º–Ω–∞—Ç–µ
        if (socket.user.role === 'admin') {
          socket.join('admins');
        }
      }

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      socket.on('sync_request', async (data) => {
        await this.handleSyncRequest(socket, data);
      });

      socket.on('shift_started', async (data) => {
        await this.handleShiftStarted(socket, data);
      });

      socket.on('shift_ended', async (data) => {
        await this.handleShiftEnded(socket, data);
      });

      socket.on('assignment_created', async (data) => {
        await this.handleAssignmentCreated(socket, data);
      });

      socket.on('disconnect', () => {
        console.log(`üì± User ${socket.user?.name} disconnected`);
        if (socket.user) {
          this.connectedUsers.delete(socket.user.id);
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      socket.emit('connected', {
        message: 'Connected to WorkTime sync server',
        timestamp: new Date(),
        user: socket.user
      });
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  private async handleSyncRequest(socket: AuthenticatedSocket, data: any): Promise<void> {
    try {
      console.log(`üîÑ Sync request from ${socket.user?.name}:`, data);
      
      // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      // –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      socket.emit('sync_response', {
        success: true,
        timestamp: new Date(),
        message: 'Sync completed successfully'
      });
    } catch (error) {
      console.error('Sync request error:', error);
      socket.emit('sync_error', {
        error: 'Failed to process sync request'
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
  private async handleShiftStarted(socket: AuthenticatedSocket, data: any): Promise<void> {
    try {
      console.log(`‚ñ∂Ô∏è Shift started by ${socket.user?.name}:`, data);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã
      this.io.to('admins').emit('user_shift_started', {
        userId: socket.user?.id,
        userName: socket.user?.name,
        siteId: data.siteId,
        siteName: data.siteName,
        timestamp: new Date(),
        location: data.location
      });

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      socket.emit('shift_start_confirmed', {
        success: true,
        shiftId: data.shiftId,
        timestamp: new Date()
      });
    } catch (error) {
      console.error('Shift start error:', error);
      socket.emit('shift_start_error', {
        error: 'Failed to start shift'
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã
  private async handleShiftEnded(socket: AuthenticatedSocket, data: any): Promise<void> {
    try {
      console.log(`‚èπÔ∏è Shift ended by ${socket.user?.name}:`, data);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–º–µ–Ω—ã
      this.io.to('admins').emit('user_shift_ended', {
        userId: socket.user?.id,
        userName: socket.user?.name,
        shiftId: data.shiftId,
        duration: data.duration,
        timestamp: new Date(),
        location: data.location
      });

      socket.emit('shift_end_confirmed', {
        success: true,
        shiftId: data.shiftId,
        timestamp: new Date()
      });
    } catch (error) {
      console.error('Shift end error:', error);
      socket.emit('shift_end_error', {
        error: 'Failed to end shift'
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  private async handleAssignmentCreated(socket: AuthenticatedSocket, data: any): Promise<void> {
    try {
      console.log(`üìã Assignment created by admin ${socket.user?.name}:`, data);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
      if (data.userId) {
        this.io.to(`user_${data.userId}`).emit('new_assignment', {
          assignmentId: data.assignmentId,
          siteId: data.siteId,
          siteName: data.siteName,
          assignedBy: socket.user?.name,
          timestamp: new Date(),
          validFrom: data.validFrom,
          validTo: data.validTo,
          notes: data.notes
        });
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
      socket.emit('assignment_created_confirmed', {
        success: true,
        assignmentId: data.assignmentId,
        timestamp: new Date()
      });
    } catch (error) {
      console.error('Assignment creation error:', error);
      socket.emit('assignment_creation_error', {
        error: 'Failed to create assignment'
      });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  public notifyUser(userId: string, event: string, data: any): void {
    this.io.to(`user_${userId}`).emit(event, {
      ...data,
      timestamp: new Date()
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
  public notifyAdmins(event: string, data: any): void {
    this.io.to('admins').emit(event, {
      ...data,
      timestamp: new Date()
    });
  }

  // –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  public broadcast(event: string, data: any): void {
    this.io.emit(event, {
      ...data,
      timestamp: new Date()
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  public getConnectedUsersCount(): number {
    return this.connectedUsers.size;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  public getConnectedUsers(): Array<{ id: string; name: string; role: string }> {
    return Array.from(this.connectedUsers.values()).map(socket => ({
      id: socket.user!.id,
      name: socket.user!.name,
      role: socket.user!.role
    }));
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  public isUserConnected(userId: string): boolean {
    return this.connectedUsers.has(userId);
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  public disconnectUser(userId: string): void {
    const socket = this.connectedUsers.get(userId);
    if (socket) {
      socket.disconnect(true);
      this.connectedUsers.delete(userId);
      console.log(`üö™ User ${userId} forcibly disconnected`);
    }
  }
} 